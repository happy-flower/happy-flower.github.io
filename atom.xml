<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Liu jinfang&#39;s Nodes</title>
  <subtitle>Quick notes</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-14T07:30:02.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>刘金芳</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用div来高仿textarea标签</title>
    <link href="http://yoursite.com/2017/09/30/%E4%BD%BF%E7%94%A8div%E6%9D%A5%E9%AB%98%E4%BB%BFtextarea/"/>
    <id>http://yoursite.com/2017/09/30/使用div来高仿textarea/</id>
    <published>2017-09-29T16:00:00.000Z</published>
    <updated>2017-08-14T07:30:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="阐述背景"><a href="#阐述背景" class="headerlink" title="阐述背景"></a>阐述背景</h3><p>-&gt; textarea有一个不足就是不能像普通div标签一样高度可以跟随内容自适应。textarea总是很自信地显摆它的滚动条，高度固执地岿然不动。所以，有时候,为了增加交互体验,让文本域高度自适应的时候，就会遇到麻烦。如果没设置style=’resize: none’,则可以拖动文本框的大小，会造成页面的重排和重绘。<br><a id="more"></a></p>
<h3 id="textarea实现代码"><a href="#textarea实现代码" class="headerlink" title="textarea实现代码"></a>textarea实现代码</h3><pre><code class="js">&lt;textarea style=<span class="string">'resize: none'</span>&gt;&lt;/textarea&gt;
textarea {
       <span class="attr">margin</span>: <span class="number">0</span> auto;
       display: block;
       width: <span class="number">400</span>px;
       height: <span class="number">120</span>px;
       margin-bottom: <span class="number">100</span>px;
}
</code></pre>
<h3 id="div实现代码"><a href="#div实现代码" class="headerlink" title="div实现代码"></a>div实现代码</h3><pre><code class="js">&lt;div contenteditable=<span class="string">"true"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"text-box"</span>&gt;&lt;br/&gt;&lt;/div&gt;
 .text-box {
        <span class="attr">width</span>: <span class="number">400</span>px;
        min-height: <span class="number">120</span>px;
        max-height: <span class="number">300</span>px;
        _height: <span class="number">120</span>px;<span class="comment">/* 兼容IE代码*/</span>
        margin-left: auto;
        margin-right: auto;
        padding: <span class="number">3</span>px;
        outline: <span class="number">0</span>;
        <span class="comment">/*现代浏览器如Firefox在可编辑模式下的div获取焦点的时候会有虚框,可以去掉虚框*/</span>
        border: <span class="number">1</span>px solid rgb(<span class="number">169</span>, <span class="number">169</span>, <span class="number">169</span>);
        font-size: <span class="number">12</span>px;
        word-wrap: <span class="keyword">break</span>-word;
        overflow-x: hidden;
        overflow-y: auto;
        _overflow-y: visible; <span class="comment">/*兼容IE代码*/</span>
    }
</code></pre>
<h3 id="效果图对比"><a href="#效果图对比" class="headerlink" title="效果图对比"></a>效果图对比</h3><p><img src="http://a1.qpic.cn/psb?/V133o6v43qtNPJ/p.kPZqQkmroBFZqvFx.jyvcd4NkKSBt.5GEjZcrrZWE!/b/dD4BAAAAAAAA&amp;bo=zQF6AQAAAAARB4c!&amp;rf=viewer_4" alt="插入图片" title="div和textarea图片对比"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;阐述背景&quot;&gt;&lt;a href=&quot;#阐述背景&quot; class=&quot;headerlink&quot; title=&quot;阐述背景&quot;&gt;&lt;/a&gt;阐述背景&lt;/h3&gt;&lt;p&gt;-&amp;gt; textarea有一个不足就是不能像普通div标签一样高度可以跟随内容自适应。textarea总是很自信地显摆它的滚动条，高度固执地岿然不动。所以，有时候,为了增加交互体验,让文本域高度自适应的时候，就会遇到麻烦。如果没设置style=’resize: none’,则可以拖动文本框的大小，会造成页面的重排和重绘。&lt;br&gt;
    
    </summary>
    
      <category term="技术积累" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2017/08/06/demo/"/>
    <id>http://yoursite.com/2017/08/06/demo/</id>
    <published>2017-08-05T16:14:42.540Z</published>
    <updated>2017-08-14T06:59:22.000Z</updated>
    
    <content type="html"><![CDATA[<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <title>使用div来高仿textarea</title>
    <style>
        textarea {
            margin: 0 auto;
            display: block;
            width: 400px;
            height: 120px;
            margin-bottom: 100px;
        }

        .text-box {
            width: 400px;
            min-height: 120px;
            max-height: 300px;
            /*_height: 120px; 兼容IE代码*/
            margin-left: auto;
            margin-right: auto;
            padding: 3px;
            outline: 0;
            /*现代浏览器如Firefox在可编辑模式下的div获取焦点的时候会有虚框,可以去掉虚框*/
            border: 1px solid rgb(169, 169, 169);
            font-size: 12px;
            word-wrap: break-word;
            overflow-x: hidden;
            overflow-y: auto;
            /*_overflow-y: visible; /*兼容IE代码*/
        }
    </style>
</head>

<body>
    <!-- textarea有一个不足就是不能像普通div标签一样高度可以跟随内容自适应。textarea总是很自信地显摆它的滚动条，高度固执地岿然不动。所以，有时候,为了增加交互体验,让文本域高度自适应的时候，就会遇到麻 -->
    <textarea style="resize: none"></textarea>
    <!-- 需要用到contenteditable属性（true规定元素可编辑,false规定元素不可编辑），主浏览器（HTML5的新属性，IE	Firefox	Chrome	Safari	Opera）都支持 -->
    <div contenteditable="true" class="text-box"><br></div>
</body>

</html>]]></content>
    
    <summary type="html">
    
      &lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;title&gt;使用div来高仿textarea&lt;/title&gt;
    &lt;style&gt;
        textarea {
     
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>词法作用域和块级作用域的介绍</title>
    <link href="http://yoursite.com/2017/07/28/%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2017/07/28/词法作用域和块级作用域的介绍/</id>
    <published>2017-07-27T16:00:00.000Z</published>
    <updated>2017-08-11T14:07:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h2><p><strong>定义</strong>： 使用代码块来限定标志的使用范围。<br><strong>块级作用域的访问范围</strong> : 从变量的声明开始到变量所在的 最近的 花括号( { } ) 结束.<br><strong> 注意：ES5 以前是不支持 块级作用域的, 只支持词法作用域.</strong></p>
<h2 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h2><p><strong>定义</strong>： 代码在编写过程中出来的作用范围。js执行过程分两个阶段:预解析, 解释执行。<br><strong>块级作用域的访问范围</strong> : 词法作用域与块级作用域不同, 在 js 中词法作用域的变量在当前作用域中具有全局可访问性.<br><a id="more"></a><br><strong>变量访问规则( 变量搜索原则 )</strong><br>操作步骤:<br>    1&gt; 将所有的 script 标签看成一个 0 级作用域.可以考虑绘制一条直线.上面标记为 0 级。<br>    2&gt; 在全局作用域中,凡是看到声明, 名字等就在线上标记一个举行块, 里面放置需要的名字( 不要数据的值 )。<br>    3&gt; 0 级链绘制完,分析 0 级作用域中所有的函数,凡是函数, 引出 1 级链,依旧绘制直线。<br>    4&gt; 分别在函数中检查是否有声明, 如果有绘制到对应的链中, 如此往复, 得到新的链, 每一条先都比原来的数字 +1。<br>    5&gt; 绘制完成后, 即得到作用域链结构。</p>
<p><strong>变量搜索原则</strong><br>凡是需要访问变量, 会考虑在当前作用域中查找是否含有该变量的声明. 如果没有对应的声明, 会到上一级作用域链中。查找是否有对应的声明. 如果有直接使用, 结束查找. 如果没有继续到上一级作用域中. 知道 0 级作用域. 如果还没有就会抛出一个错误, 就是 is not defined.</p>
<p><strong>代码分析</strong><br>分析步骤：<br>    1&gt; js 代码在预解析的时候会做两件事情, 一个是语法, 另一个是记录声明( 不包括函数内的声明 )。<br>    2&gt; 预解析完成后会从第一行代码开始依次执行 js 代码( 语句 )。<br>    3&gt; 如果进入了函数, 会在函数进入, 执行之前, 对函数内再进行对应的预解析。<br>    4&gt; 如果函数内预解析结束, 再从函数开始的位置一步一步的执行代码。</p>
<p><strong>具体事例分析</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">func1</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    num = <span class="number">456</span>;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">func2</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> num = <span class="number">789</span>;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">func3</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(num);<span class="comment">//undefined</span></div><div class="line">            <span class="keyword">var</span> num = <span class="string">'abc'</span>;</div><div class="line">        &#125;</div><div class="line">        func3();</div><div class="line">        <span class="built_in">console</span>.log(num);<span class="comment">//789</span></div><div class="line">    &#125;</div><div class="line">    func2();</div><div class="line">    <span class="built_in">console</span>.log(num);<span class="comment">//456</span></div><div class="line">&#125;</div><div class="line">func1();</div></pre></td></tr></table></figure></p>
<ol>
<li>全局的预解析，在script标签中，找到0级作用域，并用直线标明，实例中可以看出，0级上面有变量num和函数func1()；在func1()下面画直线并标明1级，找到函数func2()；在func2()下面画直线并标明2级，找到变量num，func3()；在func3()下面画直线并标明3级，并找到变量num;</li>
<li>赋值：0级的变量num为123；调用函数func1()，然后将num赋值，由于1级没有变量，直接找到0级的num并将赋值给num = 456，同时打印出num为456；给2级func2()的的num赋值num = 789，并打印num为789；再调用func3()到3级,先打印num的值,由于没有赋值，所以是undefined，然后再赋值num为abc。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;块级作用域&quot;&gt;&lt;a href=&quot;#块级作用域&quot; class=&quot;headerlink&quot; title=&quot;块级作用域&quot;&gt;&lt;/a&gt;块级作用域&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;： 使用代码块来限定标志的使用范围。&lt;br&gt;&lt;strong&gt;块级作用域的访问范围&lt;/strong&gt; : 从变量的声明开始到变量所在的 最近的 花括号( { } ) 结束.&lt;br&gt;&lt;strong&gt; 注意：ES5 以前是不支持 块级作用域的, 只支持词法作用域.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;词法作用域&quot;&gt;&lt;a href=&quot;#词法作用域&quot; class=&quot;headerlink&quot; title=&quot;词法作用域&quot;&gt;&lt;/a&gt;词法作用域&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;： 代码在编写过程中出来的作用范围。js执行过程分两个阶段:预解析, 解释执行。&lt;br&gt;&lt;strong&gt;块级作用域的访问范围&lt;/strong&gt; : 词法作用域与块级作用域不同, 在 js 中词法作用域的变量在当前作用域中具有全局可访问性.&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="块级和词法作用域" scheme="http://yoursite.com/tags/%E5%9D%97%E7%BA%A7%E5%92%8C%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>清除浮动的方式</title>
    <link href="http://yoursite.com/2017/07/25/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2017/07/25/清除浮动的方式/</id>
    <published>2017-07-24T16:00:00.000Z</published>
    <updated>2017-08-11T14:14:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="方法一：如果高度是固定的，给父级加height"><a href="#方法一：如果高度是固定的，给父级加height" class="headerlink" title="方法一：如果高度是固定的，给父级加height"></a>方法一：如果高度是固定的，给父级加height</h3><p>原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题。<br>优点：简单，代码少，容易掌握<br>缺点：只适合高度固定的布局，要给出精确的高度，如果高度和父级div不一样时，会产生问题<br>建议：不推荐使用，只建议高度固定的布局时使用<br><a id="more"></a></p>
<h3 id="方法二：父级结尾处添加额外的标签"><a href="#方法二：父级结尾处添加额外的标签" class="headerlink" title="方法二：父级结尾处添加额外的标签"></a>方法二：父级结尾处添加额外的标签</h3><p>原理：添加一个空div，利用css的clear:both清除浮动，让父级div能自动获取到高度<br>优点：简单，代码少，浏览器支持好，不容易出现怪问题<br>缺点：不少初学者不理解原理；如果页面浮动布局多，就要增加很多空div<br>建议：不推荐使用，但此方法是以前主要使用的一种清除浮动方法<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;div style="clear:both;"&gt;&lt;/div&gt;</div><div class="line">.clearfloat&#123;clear:both;&#125;</div><div class="line">&lt;div class="div1"&gt; </div><div class="line">    &lt;div class="left"&gt;Left&lt;/div&gt; </div><div class="line">&lt;div class="right"&gt;Right&lt;/div&gt;</div><div class="line">&lt;div class="clearfloat"&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="方法三：父级div定义-伪类-after和zoom"><a href="#方法三：父级div定义-伪类-after和zoom" class="headerlink" title="方法三：父级div定义 伪类:after和zoom"></a>方法三：父级div定义 伪类:after和zoom</h3><p>原理：IE8以上和非IE浏览器才支持:after，原理和方法2有点类似，zoom(IE转有属性)可解决ie6,ie7浮动问题<br>优点：浏览器支持好，不容易出现怪问题（目前：大型网站都有使用，如：腾迅，网易，新浪等等）<br>缺点：代码多，不少初学者不理解原理，要两句代码结合使用，才能让主流浏览器都支持。<br>建议：推荐使用，建议定义公共类，以减少CSS代码。</p>
<pre><code class="js">.clearfloat:after{display:block;clear:both;content:"";visibility:hidden;height:0}
.clearfloat{zoom:1}
.left{float:left;width:20%;height:200px;background:#DDD}
.right{float:right;width:30%;height:80px;background:#DDD}
.div2{background:#800080;border:1px solid red;margin-top:10px;width:98%}
&lt;div class="div1 clearfloat"&gt; 
&lt;div class="left"&gt;Left&lt;/div&gt; 
&lt;div class="right"&gt;Right&lt;/div&gt; 
&lt;/div&gt;
&lt;div class="div2"&gt;div2&lt;/div&gt;
</code></pre>
<h3 id="方法四：父级div定义-overflow：hidden"><a href="#方法四：父级div定义-overflow：hidden" class="headerlink" title="方法四：父级div定义 overflow：hidden"></a>方法四：父级div定义 overflow：hidden</h3><p>原理：必须定义width或zoom:1，同时不能定义height，使用overflow:hidden时，浏览器会自动检查浮动区域的高度<br>优点：简单，代码少，浏览器支持好<br>缺点：不能和position配合使用，因为超出的尺寸的会被隐藏。<br>建议：只推荐没有使用position或对overflow:hidden理解比较深的朋友使用。</p>
<pre><code class="js">.div1{background:#000080;border:1px solid red;/*解决代码*/width:98%;overflow:auto}
.div2{background:#800080;border:1px solid red;margin-top:10px;width:98%}
.left{float:left;width:20%;height:200px;background:#DDD}
.right{float:right;width:30%;height:80px;background:#DDD}
&lt;div class="div1"&gt; 
    &lt;div class="left"&gt;Left&lt;/div&gt; 
    &lt;div class="right"&gt;Right&lt;/div&gt;
&lt;/div&gt;
&lt;div class="div2"&gt;div2&lt;/div&gt;
</code></pre>
<h3 id="方法五：父级div定义-overlow-auto"><a href="#方法五：父级div定义-overlow-auto" class="headerlink" title="方法五：父级div定义 overlow:auto"></a>方法五：父级div定义 overlow:auto</h3><p>原理：必须定义width或zoom:1，同时不能定义height，使用overflow:auto时，浏览器会自动检查浮动区域的高度<br>优点：简单，代码少，浏览器支持好<br>缺点：内部宽高超过父级div时，会出现滚动条。<br>建议：如果你需要出现滚动条或者确保你的代码不会出现滚动条就使用吧。</p>
<h3 id="方法六：父级div也一起浮动"><a href="#方法六：父级div也一起浮动" class="headerlink" title="方法六：父级div也一起浮动"></a>方法六：父级div也一起浮动</h3><p>原理：所有代码一起浮动，就变成了一个整体<br>优点：没有优点<br>缺点：会产生新的浮动问题。<br>建议：不推荐使用，只作了解。</p>
<h3 id="方法七：父级div定义-display-table"><a href="#方法七：父级div定义-display-table" class="headerlink" title="方法七：父级div定义 display:table"></a>方法七：父级div定义 display:table</h3><p>原理：将div属性变成表格<br>优点：没有优点<br>缺点：会产生新的未知问题。<br>建议：不推荐使用，只作了解。</p>
<h3 id="方法八：父级结尾处添加标签”-lt-br-style-”clear-both-gt-”"><a href="#方法八：父级结尾处添加标签”-lt-br-style-”clear-both-gt-”" class="headerlink" title="方法八：父级结尾处添加标签”&lt;br style=”clear:both;/&gt;”"></a>方法八：父级结尾处添加标签”&lt;br style=”clear:both;/&gt;”</h3><p>原理：父级div定义zoom:1来解决IE浮动问题，结尾处加 br标签 clear:both<br>建议：不推荐使用，只作了解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;方法一：如果高度是固定的，给父级加height&quot;&gt;&lt;a href=&quot;#方法一：如果高度是固定的，给父级加height&quot; class=&quot;headerlink&quot; title=&quot;方法一：如果高度是固定的，给父级加height&quot;&gt;&lt;/a&gt;方法一：如果高度是固定的，给父级加height&lt;/h3&gt;&lt;p&gt;原理：父级div手动定义height，就解决了父级div无法自动获取到高度的问题。&lt;br&gt;优点：简单，代码少，容易掌握&lt;br&gt;缺点：只适合高度固定的布局，要给出精确的高度，如果高度和父级div不一样时，会产生问题&lt;br&gt;建议：不推荐使用，只建议高度固定的布局时使用&lt;br&gt;
    
    </summary>
    
      <category term="技术积累" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>gulp的介绍及使用</title>
    <link href="http://yoursite.com/2017/03/05/gulp%E8%AE%A4%E8%AF%86%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2017/03/05/gulp认识及使用/</id>
    <published>2017-03-04T16:00:00.000Z</published>
    <updated>2017-08-14T07:40:02.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gulp的基本介绍"><a href="#gulp的基本介绍" class="headerlink" title="gulp的基本介绍"></a>gulp的基本介绍</h3><p>-&gt; gulp 是一个项目构建工具,其核心内容是提供一个处理项目文件与机构的平台. 相当于一个 处理容器, 处理管道。</p>
<h3 id="gulp具体的作用"><a href="#gulp具体的作用" class="headerlink" title="gulp具体的作用"></a>gulp具体的作用</h3><ol>
<li>代码的压缩</li>
<li>代码的合并</li>
<li>less 转 css</li>
<li>代码的混淆</li>
<li>引用的替换<a id="more"></a>
<h3 id="gulp常见的第三方库"><a href="#gulp常见的第三方库" class="headerlink" title="gulp常见的第三方库"></a>gulp常见的第三方库</h3>-&gt; gulp-concat  用于合并代码<br>-&gt; gulp-htmlmin 用于压缩 html 文件<br>-&gt; gulp-uglify 用于压缩 js 文件<br>-&gt; gulp-cssmin 用于压缩 css 文件<br>-&gt; gulp-rename, gulp-html-replace<br><code>注意：可以在www.npmjs.org第三方库中查询。</code></li>
</ol>
<h3 id="使用gulp来进行代码的实现步骤"><a href="#使用gulp来进行代码的实现步骤" class="headerlink" title="使用gulp来进行代码的实现步骤"></a>使用gulp来进行代码的实现步骤</h3><h4 id="1-创建一个-任务"><a href="#1-创建一个-任务" class="headerlink" title="1. 创建一个 任务"></a>1. 创建一个 任务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gulp.task(任务名，<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">     执行任务就是执行这个函数</div><div class="line"> &#125;)</div></pre></td></tr></table></figure>
<h4 id="2-确定要处理什么文件"><a href="#2-确定要处理什么文件" class="headerlink" title="2. 确定要处理什么文件"></a>2. 确定要处理什么文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">gulp.task( 任务名, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">        // 执行任务就是在执行这个函数</div><div class="line">        gulp.src( <span class="string">'文件名'</span> )</div><div class="line">&#125; )</div></pre></td></tr></table></figure>
<h4 id="3-利用第三方提供的-方法-例如方法名是-handle"><a href="#3-利用第三方提供的-方法-例如方法名是-handle" class="headerlink" title="3. 利用第三方提供的 方法, 例如方法名是 handle"></a>3. 利用第三方提供的 方法, 例如方法名是 handle</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gulp.task( 任务名, <span class="function"><span class="title">function</span></span> () &#123; </div><div class="line">    // 执行任务就是在执行这个函数           </div><div class="line">  gulp.src( <span class="string">'文件名'</span> )</div><div class="line">      .pipe( handle )</div><div class="line">&#125; )</div></pre></td></tr></table></figure>
<h4 id="4-将处理的结果保存到某一个文件夹中-例如-dist-文件夹"><a href="#4-将处理的结果保存到某一个文件夹中-例如-dist-文件夹" class="headerlink" title="4. 将处理的结果保存到某一个文件夹中, 例如 dist 文件夹"></a>4. 将处理的结果保存到某一个文件夹中, 例如 dist 文件夹</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gulp.task( 任务名, <span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">  // 执行任务就是在执行这个函数</div><div class="line">  gulp.src( <span class="string">'文件名'</span> )</div><div class="line">      .pipe( handle )</div><div class="line">      .pipe( gulp.dest( <span class="string">'dist'</span> ) );</div><div class="line">&#125; );</div></pre></td></tr></table></figure>
<h4 id="具体案例分析"><a href="#具体案例分析" class="headerlink" title="具体案例分析"></a>具体案例分析</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">    --单个任务执行--</div><div class="line">    -&gt; 实现less转css的文件(提前下载好npm install gulp -g 和在需要实现代码转化的目录下下载npm install gulp，npm install gulp-less);</div><div class="line">    -&gt; 在该文件夹下建立一个src文件夹，里面放置需要置换的文件less文件，与此同时还需建立一个gulpfile.js文件，来编写如下的代码。</div><div class="line">        var gulp = require(<span class="string">'gulp'</span>);//需引入包</div><div class="line">        var less = require(<span class="string">'gulp-less'</span>);//需引入包</div><div class="line">        gulp.task(<span class="string">'default'</span>,<span class="function"><span class="title">function</span></span>() &#123;</div><div class="line">            gulp.src(<span class="string">'./src/*less'</span>)</div><div class="line">            .pipe(less())</div><div class="line">            .pipe(gulp.dest(<span class="string">'dist'</span>))</div><div class="line">                    &#125;)</div><div class="line">    -&gt; 在linux下运行gulp文件即可。</div><div class="line">    -&gt; 注意：src文件路径，如果有两个文件夹或以上，则需gulp.src(<span class="string">'./src/**/*less'</span>);</div><div class="line"></div><div class="line">--gulp.watch 监视--</div><div class="line">  该方法用于监视文件的变化, 当文件发生变化的时候可以触发一个行为</div><div class="line">  gulp.watch( <span class="string">'文件匹配'</span>, [ 依赖任务 ], <span class="function"><span class="title">function</span></span> () &#123;&#125; )</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;gulp的基本介绍&quot;&gt;&lt;a href=&quot;#gulp的基本介绍&quot; class=&quot;headerlink&quot; title=&quot;gulp的基本介绍&quot;&gt;&lt;/a&gt;gulp的基本介绍&lt;/h3&gt;&lt;p&gt;-&amp;gt; gulp 是一个项目构建工具,其核心内容是提供一个处理项目文件与机构的平台. 相当于一个 处理容器, 处理管道。&lt;/p&gt;
&lt;h3 id=&quot;gulp具体的作用&quot;&gt;&lt;a href=&quot;#gulp具体的作用&quot; class=&quot;headerlink&quot; title=&quot;gulp具体的作用&quot;&gt;&lt;/a&gt;gulp具体的作用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;代码的压缩&lt;/li&gt;
&lt;li&gt;代码的合并&lt;/li&gt;
&lt;li&gt;less 转 css&lt;/li&gt;
&lt;li&gt;代码的混淆&lt;/li&gt;
&lt;li&gt;引用的替换
    
    </summary>
    
      <category term="技术积累" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="gulp" scheme="http://yoursite.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>关于js执行属于单线程案例---demo</title>
    <link href="http://yoursite.com/2017/01/22/js%E4%B8%AD%E5%8D%95%E7%BA%BF%E7%A8%8B%E7%9A%84%E8%AF%81%E6%98%8E/"/>
    <id>http://yoursite.com/2017/01/22/js中单线程的证明/</id>
    <published>2017-01-21T16:00:00.000Z</published>
    <updated>2017-08-14T07:36:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="在-js-中是单线程的-所谓的异步是假的"><a href="#在-js-中是单线程的-所谓的异步是假的" class="headerlink" title="在 js 中是单线程的, 所谓的异步是假的."></a>在 js 中是单线程的, 所谓的异步是假的.</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">以下代码可以证明：但是如何来模拟多任务的执行呢? 在 js 中引入了事件队列的概念.所谓的事件对象就是事件数组. 这个数组的特点就是每次都调用 <span class="built_in">shift</span> 方法获得数组中的事件处理函数每次都调用 push 方法将函数存储到数组中. 每次在执行类似于事件, 计时器 ajax 等操作时, 并不是立即调用该函数. 每次都是将对应的函数投递到 <span class="string">"数组"</span> 中. 例如:</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="number">5</span>);</div><div class="line">&#125;<span class="comment">//加入此条命令后，定时器里面的命令将永远无法执行。</span></div><div class="line"><span class="built_in">console</span>.log( <span class="string">'console1'</span> );</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="number">1</span> ); </div><div class="line">&#125;, <span class="number">2000</span> );</div><div class="line"><span class="built_in">console</span>.log( <span class="string">'console2'</span> );</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log( <span class="number">2</span> ); </div><div class="line">&#125;, <span class="number">1000</span> );</div><div class="line"><span class="built_in">console</span>.log( <span class="string">'console3'</span> );</div></pre></td></tr></table></figure>
 <a id="more"></a>
<p> 简单分析:</p>
<pre><code>1.  代码从上往下运行, 执行第一个 打印, 打印出 console1
2.  有一个异步代码, 将函数投递到数组中. 
3.  打印, 就打印出 console2
4.  有看到一个计时器, 又将函数存储到数组中
5.  又看到了打印, 所以打印出 console3
6.  代码执行完, 将数组中的函数依次执行. 同时清空数组.
</code></pre><h2 id="while-1-当加行死循环后，队列中的两个定时器将永远也不会执行的。"><a href="#while-1-当加行死循环后，队列中的两个定时器将永远也不会执行的。" class="headerlink" title="while ( 1 );当加行死循环后，队列中的两个定时器将永远也不会执行的。"></a>while ( 1 );当加行死循环后，队列中的两个定时器将永远也不会执行的。</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;在-js-中是单线程的-所谓的异步是假的&quot;&gt;&lt;a href=&quot;#在-js-中是单线程的-所谓的异步是假的&quot; class=&quot;headerlink&quot; title=&quot;在 js 中是单线程的, 所谓的异步是假的.&quot;&gt;&lt;/a&gt;在 js 中是单线程的, 所谓的异步是假的.&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;以下代码可以证明：但是如何来模拟多任务的执行呢? 在 js 中引入了事件队列的概念.所谓的事件对象就是事件数组. 这个数组的特点就是每次都调用 &lt;span class=&quot;built_in&quot;&gt;shift&lt;/span&gt; 方法获得数组中的事件处理函数每次都调用 push 方法将函数存储到数组中. 每次在执行类似于事件, 计时器 ajax 等操作时, 并不是立即调用该函数. 每次都是将对应的函数投递到 &lt;span class=&quot;string&quot;&gt;&quot;数组&quot;&lt;/span&gt; 中. 例如:&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;comment&quot;&gt;//加入此条命令后，定时器里面的命令将永远无法执行。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;string&quot;&gt;&#39;console1&#39;&lt;/span&gt; );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; ); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt; );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;string&quot;&gt;&#39;console2&#39;&lt;/span&gt; );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setTimeout(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; ); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt; );&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;string&quot;&gt;&#39;console3&#39;&lt;/span&gt; );&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术积累" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="setTimeout" scheme="http://yoursite.com/tags/setTimeout/"/>
    
  </entry>
  
  <entry>
    <title>WEB前端性能优化</title>
    <link href="http://yoursite.com/2016/11/20/WEB%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/11/20/WEB前端性能优化/</id>
    <published>2016-11-19T16:00:00.000Z</published>
    <updated>2017-08-14T07:36:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WEB前端性能优化总结"><a href="#WEB前端性能优化总结" class="headerlink" title="WEB前端性能优化总结"></a>WEB前端性能优化总结</h1><h3 id="1-减少http请求-合理设置HTTP缓存"><a href="#1-减少http请求-合理设置HTTP缓存" class="headerlink" title="1.减少http请求,合理设置HTTP缓存"></a>1.减少http请求,合理设置HTTP缓存</h3><h4 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a. http协议是无状态的应用层协议，意味着每次http请求都需要建立通信链路、进行数据传输，而在服务器端，每个http都需要启动独立的线程去处理。这些通信和服务的开销都很昂贵，减少http请求的数目可有效提高访问性能。</div><div class="line"></div><div class="line">b. 减少http的主要手段是合并CSS、合并javascript、合并图片。将浏览器一次访问需要的javascript和CSS合并成一个文件，这样浏览器就只需要一次请求。图片也可以合并，多张图片合并成一张，如果每张图片都有不同的超链接，可通过CSS偏移响应鼠标点击操作，构造不同的URL。</div><div class="line"></div><div class="line">c. 缓存的力量是强大的，恰当的缓存设置可以大大的减少 HTTP请求。假设某网站首页，当浏览器没有缓存的时候访问一共会发出 78个请求，共 600多 K数据，而当第二次访问即浏览器已缓存之后访问则仅有 10个请求，共 20多 K数据。 (这里需要说明的是，如果直接 F5刷新页面的话效果是不一样的，这种情况下请求数还是一样，不过被缓存资源的请求服务器是 304响应，只有 Header没有Body，可以节省带宽 )</div><div class="line"></div><div class="line">d. 怎样才算合理设置 ?原则很简单，能缓存越多越好，能缓存越久越好。例如，很少变化的图片资源可以直接通过 HTTP Header中的Expires设置一个很长的过期头 ;变化不频繁而又可能会变的资源可以使用 Last-Modifed来做请求验证。尽可能的让资源能够在缓存中待得更久。关于 HTTP缓存的具体设置和原理此处就不再详述了。</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="基本原理："><a href="#基本原理：" class="headerlink" title="基本原理："></a>基本原理：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">a. 在浏览器(客户端)和服务器发生通信时，就已经消耗了大量的时间，尤其是在网络情况比较糟糕的时候，这个问题尤其的突出。</div><div class="line"></div><div class="line">b. 一个正常HTTP请求的流程简述：如在浏览器中输入<span class="string">"www.xxxxxx.com"</span>并按下回车，浏览器再与这个URL指向的服务器建立连接，然后浏览器才能向服务器发送请求信息，服务器在接受到请求的信息后再返回相应的信息，浏览器接收到来自服务器的应答信息后，对这些数据解释执行。</div><div class="line"></div><div class="line">c.而当我们请求的网页文件中有很多图片、CSS、JS甚至音乐等信息时，将会频繁的与服务器建立连接，与释放连接，这必定会造成资源的浪费，且每个HTTP请求都会对服务器和浏览器产生性能负担。</div><div class="line"></div><div class="line">d.网速相同的条件下，下载一个100KB的图片比下载两个50KB的图片要快。所以，请减少HTTP请求。</div></pre></td></tr></table></figure>
<h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><ul>
<li>合并图片（css sprites），合并CSS和JS文件；图片较多的页面也可以使用 lazyLoad 等技术进行优化。</li>
</ul>
<h5 id="CSS-Sprites"><a href="#CSS-Sprites" class="headerlink" title="CSS Sprites"></a>CSS Sprites</h5><ul>
<li>简介: 合并 CSS图片，减少请求数的又一个好办法.使用图片Sprite技术.关于图片精灵(Sprite)技术就和我们工作直接相关，不管是在CSS中的图片还是在HTML结构中的图片都会产生HTTP请求，前端优化的第一条就是减少请求数，最直接有效的方法是使用图片精灵（CSS Sprite）。图片精灵就是把许多图片放到一张大图片里面，通过CSS来显示图片的一部分。</li>
</ul>
<h5 id="LazyLoad-Images"><a href="#LazyLoad-Images" class="headerlink" title="LazyLoad Images"></a>LazyLoad Images</h5><ul>
<li>这条策略实际上并不一定能减少 HTTP请求数，但是却能在某些条件下或者页面刚加载时减少 HTTP请求数。对于图片而言，在页面刚加载的时候可以只加载第一屏，当用户继续往后滚屏的时候才加载后续的图片。这样一来，假如用户只对第一屏的内容感兴趣时，那剩余的图片请求就都节省了。      </li>
</ul>
<h4 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h4><ul>
<li>基本原理:现在由于工作的细分，专业的前端工程师已经少有机会去切图了，可是关于图片压缩还是得略微了解，一般图片压缩的方式有：<br>-&gt;  1.缩小图片分辨率；<br>-&gt;  2.改变图片格式；<br>-&gt;  3.降低图片保存质量。</li>
</ul>
<h3 id="2、使用浏览器缓存"><a href="#2、使用浏览器缓存" class="headerlink" title="2、使用浏览器缓存"></a>2、使用浏览器缓存</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a. 对一个网站而言，CSS、javascript、logo、图标这些静态资源文件更新的频率都比较低，而这些文件又几乎是每次http请求都需要的，如果将这些文件缓存在浏览器中，可以极好的改善性能。通过设置http头中的cache-control和expires的属性，可设定浏览器缓存，缓存时间可以是数天，甚至是几个月。</div><div class="line">b. 在某些时候，静态资源文件变化需要及时应用到客户端浏览器，这种情况，可通过改变文件名实现，即更新javascript文件并不是更新javascript文件内容，而是生成一个新的JS文件并更新HTML文件中的引用。</div><div class="line">c. 使用浏览器缓存策略的网站在更新静态资源时，应采用逐量更新的方法，比如需要更新10个图标文件，不宜把10个文件一次全部更新，而是应该一个文件一个文件逐步更新，并有一定的间隔时间，以免用户浏览器忽然大量缓存失效，集中更新缓存，造成服务器负载骤增、网络堵塞的情况。</div></pre></td></tr></table></figure>
<h3 id="3、启用压缩"><a href="#3、启用压缩" class="headerlink" title="3、启用压缩"></a>3、启用压缩</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">* 在服务器端对文件进行压缩，在浏览器端对文件解压缩，可有效减少通信传输的数据量。如果可以的话，尽可能的将外部的脚本、样式进行合并，多个合为一个。文本文件的压缩效率可达到80%以上，因此HTML、CSS、javascript文件启用GZip压缩可达到较好的效果。但是压缩对服务器和浏览器产生一定的压力，在通信带宽良好，而服务器资源不足的情况下要权衡考虑。</div></pre></td></tr></table></figure>
<h3 id="4、CSS放在页面最上部，javascript放在页面最下面"><a href="#4、CSS放在页面最上部，javascript放在页面最下面" class="headerlink" title="4、CSS放在页面最上部，javascript放在页面最下面"></a>4、CSS放在页面最上部，javascript放在页面最下面</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">a.浏览器会在下载完成全部CSS之后才对整个页面进行渲染，因此最好的做法是将CSS放在页面最上面，让浏览器尽快下载CSS。如果将 CSS放在其他地方比如 BODY中，则浏览器有可能还未下载和解析到 CSS就已经开始渲染页面了，这就导致页面由无 CSS状态跳转到 CSS状态，用户体验比较糟糕，所以可以考虑将CSS放在HEAD中。</div><div class="line">b.Javascript则相反，浏览器在加载javascript后立即执行，有可能会阻塞整个页面，造成页面显示缓慢，因此javascript最好放在页面最下面。但如果页面解析时就需要用到javascript，这时放到底部就不合适了。</div><div class="line">c.Lazy Load Javascript（只有在需要加载的时候加载，在一般情况下并不加载信息内容。）随着 Javascript框架的流行，越来越多的站点也使用起了框架。不过，一个框架往往包括了很多的功能实现，这些功能并不是每一个页面都需要的，如果下载了不需要的脚本则算得上是一种资源浪费 -既浪费了带宽又浪费了执行花费的时间。目前的做法大概有两种，一种是为那些流量特别大的页面专门定制一个专用的 mini版框架，另一种则是 Lazy Load。</div></pre></td></tr></table></figure>
<h3 id="5、异步请求Callback（就是将一些行为样式提取出来，慢慢的加载信息的内容）在某些页面中可能存在这样一种需求，需要使用-script标签来异步的请求数据。类似："><a href="#5、异步请求Callback（就是将一些行为样式提取出来，慢慢的加载信息的内容）在某些页面中可能存在这样一种需求，需要使用-script标签来异步的请求数据。类似：" class="headerlink" title="5、异步请求Callback（就是将一些行为样式提取出来，慢慢的加载信息的内容）在某些页面中可能存在这样一种需求，需要使用 script标签来异步的请求数据。类似："></a>5、异步请求Callback（就是将一些行为样式提取出来，慢慢的加载信息的内容）在某些页面中可能存在这样一种需求，需要使用 script标签来异步的请求数据。类似：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[javascript] view plain copy print?</div><div class="line">&lt;span style="font-size:14px;"&gt;/*Callback 函数*/  </div><div class="line">function myCallback(info)&#123; //do something here   &#125;   </div><div class="line">&lt;!--HTML: Callback返回的内容 :  --&gt;</div><div class="line">myCallback('Hello world!');  </div><div class="line">&lt;/span&gt;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">像以上这种方式直接在页面上写 &lt;script&gt; 对页面的性能也是有影响的，即增加了页面首次加载的负担，推迟了 DOMLoaded和window.onload 事件的触发时机。如果时效性允许的话，可以考虑在 DOMLoaded事件触发的时候加载，或者使用 setTimeout方式来灵活的控制加载的时机。</div></pre></td></tr></table></figure>
<h3 id="6、减少cookie传输"><a href="#6、减少cookie传输" class="headerlink" title="6、减少cookie传输"></a>6、减少cookie传输</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">一方面，cookie包含在每次请求和响应中，太大的cookie会严重影响数据传输，因此哪些数据需要写入cookie需要慎重考虑，尽量减少cookie中传输的数据量。另一方面，对于某些静态资源的访问，如CSS、script等，发送cookie没有意义，可以考虑静态资源使用独立域名访问，避免请求静态资源时发送cookie，减少cookie传输次数。</div></pre></td></tr></table></figure>
<h3 id="7、Javascript代码优化"><a href="#7、Javascript代码优化" class="headerlink" title="7、Javascript代码优化"></a>7、Javascript代码优化</h3><h4 id="1-gt-DOM"><a href="#1-gt-DOM" class="headerlink" title="1&gt; DOM    　　"></a>1&gt; DOM    　　</h4><h5 id="a-HTML-Collection（HTML收集器，返回的是一个数组内容信息）"><a href="#a-HTML-Collection（HTML收集器，返回的是一个数组内容信息）" class="headerlink" title="a.HTML Collection（HTML收集器，返回的是一个数组内容信息）"></a>a.HTML Collection（HTML收集器，返回的是一个数组内容信息）</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">* 在脚本中 document.images、document.forms、getElementsByTagName()返回的都是HTMLCollection类型的集合，在平时使用的时候大多将它作为数组来使用,因为它有 length属性，也可以使用索引访问每一个元素。不过在访问性能上则比数组要差很多，原因是这个集合并不是一个静态的结果，它表示的仅仅是一个特定的查询，每次访问该集合时都会重新执行这个查询从而更新查询结果。所谓的“访问集合” 包括读取集合的 length属性、访问集合中的元素。</div><div class="line">* 因此，当你需要遍历 HTML Collection的时候，尽量将它转为数组后再访问，以提高性能。即使不转换为数组，也请尽可能少的访问       它，例如在遍历的时候可以将 length属性、成员保存到局部变量后再使用局部变量。　　 </div><div class="line">``` </div><div class="line"></div><div class="line"><span class="comment">##### b. Reflow &amp; Repaint     　　 </span></div><div class="line">除了上面一点之外， DOM操作还需要考虑浏览器的Reflow和Repaint </div><div class="line">注：Repaint 和 Reflow 也就是重绘和重排</div><div class="line"><span class="comment">##### 基本原理：</span></div><div class="line"></div><div class="line">``` bash </div><div class="line">a.Repaint(重绘)就是在一个元素的外观被改变，但没有改变布局(宽高)的情况下发生，如改变visibility、outline、背景色等等。</div><div class="line"></div><div class="line">b.Reflow(重排)就是DOM的变化影响到了元素的几何属性（宽和高），浏览器会重新计算元素的几何属性，会使渲染树中受到影响的部分失效，浏览器会验证DOM树上的所有其它结点的visibility属性，这也是Reflow低效的原因。如：改变窗囗大小、改变文字大小、内容的改变、浏览器窗口变化，style属性的改变等等。如果Reflow的过于频繁，CPU使用率就会噌噌的往上涨，所以前端也就有必要知道 Repaint 和 Reflow的知识。</div></pre></td></tr></table></figure>
<h5 id="减少性能影响的办法："><a href="#减少性能影响的办法：" class="headerlink" title="减少性能影响的办法："></a>减少性能影响的办法：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">上面提到通过设置style属性改变结点样式的话，每设置一次都会导致一次reflow，所以最好通过设置class的方式； 有动画效果的元素，它的position属性应当设为fixed或absolute，这样不会影响其它元素的布局；如果功能需求上不能设置position为fixed或absolute，那么就权衡速度的平滑性。</div><div class="line">总之，因为 Reflow 有时确实不可避免，所以只能尽可能限制Reflow的影响范围。</div></pre></td></tr></table></figure>
<h4 id="2-gt-慎用-with"><a href="#2-gt-慎用-with" class="headerlink" title="2&gt; 慎用 with"></a>2&gt; 慎用 with</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a.with(obj)&#123; p = 1&#125;; 代码块的行为实际上是修改了代码块中的执行环境 ，将obj放在了其作用域链的最前端，在 with代码块中访问非局部变量是都是先从 obj上开始查找，如果没有再依次按作用域链向上查找，因此使用 with相当于增加了作用域链长度。而每次查找作用域链都是要消耗时间的，过长的作用域链会导致查找性能下降。 </div><div class="line">b.因此，除非你能肯定在 with代码中只访问 obj中的属性，否则慎用 with，替代的可以使用局部变量缓存需要访问的属性。</div></pre></td></tr></table></figure>
<h4 id="3-gt-避免使用-eval和-Function"><a href="#3-gt-避免使用-eval和-Function" class="headerlink" title="3&gt; 避免使用 eval和 Function"></a>3&gt; 避免使用 eval和 Function</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a.每次 <span class="built_in">eval</span> 或Function 构造函数作用于字符串表示的源代码时，脚本引擎都需要将源代码转换成可执行代码。这是很消耗资源的操作 —— 通常比简单的函数调用慢 100倍以上。 </div><div class="line">b.eval 函数效率特别低，由于事先无法知晓传给 <span class="built_in">eval</span> 的字符串中的内容，<span class="built_in">eval</span>在其上下文中解释要处理的代码，也就是说编译器无法优化上下文，因此只能有浏览器在运行时解释代码。这对性能影响很大。 </div><div class="line">c.Function 构造函数比 <span class="built_in">eval</span>略好，因为使用此代码不会影响周围代码 ;但其速度仍很慢。 </div><div class="line">d.此外，使用 <span class="built_in">eval</span>和 Function也不利于Javascript 压缩工具执行压缩。</div></pre></td></tr></table></figure>
<h4 id="4-gt-减少作用域链查找"><a href="#4-gt-减少作用域链查找" class="headerlink" title="4&gt; 减少作用域链查找"></a>4&gt; 减少作用域链查找</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在作用域链查找问题，这一点在循环中是尤其需要注意的问题。如果在循环中需要访问非本作用域下的变量时请在遍历之前用局部变量缓存该变量，并在遍历结束后再重写那个变量，这一点对全局变量尤其重要，因为全局变量处于作用域链的最顶端，访问时的查找次数是最多的。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">        &lt;!--低效率的写法：--&gt;</div><div class="line">        [javascript] view plain copy print?</div><div class="line">        &lt;span style="font-size:14px;"&gt;// 全局变量   </div><div class="line">        var globalVar = 1;   </div><div class="line">        function myCallback(info)&#123;   </div><div class="line">            for( var i = 100000; i--;)&#123;   </div><div class="line">            //每次访问 globalVar 都需要查找到作用域链最顶端，本例中需要访问 100000 次   </div><div class="line">                globalVar += i;   </div><div class="line">            &#125;  </div><div class="line">        &#125;   </div><div class="line">        &lt;/span&gt;  </div><div class="line"></div><div class="line">        &lt;!--更高效的写法：--&gt;</div><div class="line">        [javascript] view plain copy print?</div><div class="line">        &lt;span style="font-size:14px;"&gt;// 全局变量   </div><div class="line">        var globalVar = 1;   </div><div class="line">        function myCallback(info)&#123;   </div><div class="line">            //局部变量缓存全局变量   </div><div class="line">            var localVar = globalVar;   </div><div class="line">            for( var i = 100000; i--;)&#123;   </div><div class="line">            //访问局部变量是最快的   </div><div class="line">                localVar += i;   </div><div class="line">            &#125;   </div><div class="line">            //本例中只需要访问 2次全局变量  </div><div class="line">            在函数中只需要将 globalVar中内容的值赋给localVar 中  </div><div class="line">         globalVar = localVar;   </div><div class="line">        &#125;  </div><div class="line">        &lt;/span&gt;  </div><div class="line">此外，要减少作用域链查找还应该减少闭包的使用。</div></pre></td></tr></table></figure>
<h4 id="5-gt-数据访问"><a href="#5-gt-数据访问" class="headerlink" title="5&gt; 数据访问"></a>5&gt; 数据访问</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Javascript中的数据访问包括直接量 (字符串、正则表达式 )、变量、对象属性以及数组，其中对直接量和局部变量的访问是最快的，对对象属性以及数组的访问需要更大的开销。当出现以下情况时，建议将数据放入局部变量： </div><div class="line">　　 a. 对任何对象属性的访问超过 1次 </div><div class="line">     b. 对任何数组成员的访问次数超过 1次 </div><div class="line">另外，还应当尽可能的减少对对象以及数组深度查找。</div></pre></td></tr></table></figure>
<h4 id="6-gt-字符串拼接"><a href="#6-gt-字符串拼接" class="headerlink" title="6&gt; 字符串拼接"></a>6&gt; 字符串拼接</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">在 Javascript中使用”+”号来拼接字符串效率是比较低的，因为每次运行都会开辟新的内存并生成新的字符串变量，然后将拼接结果赋值给新变量。与之相比更为高效的做法是使用数组的 join方法，即将需要拼接的字符串放在数组中最后调用其 join方法得到结果。不过由于使用数组也有一定的开销，因此当需要拼接的字符串较多的时候可以考虑用此方法。</div></pre></td></tr></table></figure>
<h3 id="8、CSS选择符优化"><a href="#8、CSS选择符优化" class="headerlink" title="8、CSS选择符优化"></a>8、CSS选择符优化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">a.在大多数人的观念中，都觉得浏览器对 CSS选择符的解析式从左往右进行的，例如</div><div class="line"><span class="comment">#toc A &#123; color: #444; &#125;这样一个选择符，如果是从右往左解析则效率会很高，因为第一个 ID选择基本上就把查找的范围限定了，但实际上浏览器对选择符的解析是从右往左进行的。如上面的选择符，浏览器必须遍历查找每一个 A标签的祖先节点，效率并不像之前想象的那样高。根据浏览器的这一行为特点，在写选择符的时候需要注意很多事项，有兴趣的童鞋可以去了解一下。</span></div></pre></td></tr></table></figure>
<h5 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">a.CDN（contentdistribute network，内容分发网络）的本质仍然是一个缓存，而且将数据缓存在离用户最近的地方，使用户以最快速度获取数据，即所谓网络访问第一跳，如下图。</div><div class="line"></div><div class="line">b.由于CDN部署在网络运营商的机房，这些运营商又是终端用户的网络服务提供商，因此用户请求路由的第一跳就到达了CDN服务器，当CDN中存在浏览器请求的资源时，从CDN直接返回给浏览器，最短路径返回响应，加快用户访问速度，减少数据中心负载压力。 </div><div class="line">c.CDN缓存的一般是静态资源，如图片、文件、CSS、script脚本、静态网页等，但是这些文件访问频度很高，将其缓存在CDN可极大改善网页的打开速度。</div><div class="line">```        </div><div class="line"></div><div class="line"><span class="comment">##### 反向代理</span></div><div class="line"></div><div class="line">```bash</div><div class="line">a.传统代理服务器位于浏览器一侧，代理浏览器将http请求发送到互联网上，而反向代理服务器位于网站机房一侧，代理网站web服务器接收http请求。如下图所示：</div><div class="line"></div><div class="line">b.论坛网站，把热门词条、帖子、博客缓存在反向代理服务器上加速用户访问速度，当这些动态内容有变化时，通过内部通知机制通知反向代理缓存失效，反向代理会重新加载最新的动态内容再次缓存起来。</div><div class="line"></div><div class="line">c.此外，反向代理也可以实现负载均衡的功能，而通过负载均衡构建的应用集群可以提高系统总体处理能力，进而改善网站高并发情况下的性能。</div></pre></td></tr></table></figure>
<h3 id="9、请减少对DOM的操作"><a href="#9、请减少对DOM的操作" class="headerlink" title="9、请减少对DOM的操作"></a>9、请减少对DOM的操作</h3><h4 id="基本原理：-1"><a href="#基本原理：-1" class="headerlink" title="基本原理："></a>基本原理：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">对DOM操作的代价是高昂的，这在网页应用中的通常是一个性能瓶颈。</div><div class="line">天生就慢。在《高性能JavaScript》中这么比喻：“把DOM看成一个岛屿，把JavaScript(ECMAScript)看成另一个岛屿，两者之间以一座收费桥连接”。所以每次访问DOM都会教一个过桥费，而访问的次数越多，交的费用也就越多。所以一般建议尽量减少过桥次数。</div></pre></td></tr></table></figure>
<h4 id="解决办法：-1"><a href="#解决办法：-1" class="headerlink" title="解决办法："></a>解决办法：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a.修改和访问DOM元素会造成页面的Repaint和Reflow，循环对DOM操作更是罪恶的行为。所以请合理的使用JavaScript变量储存内容，考虑大量DOM元素中循环的性能开销，在循环结束时一次性写入。</div><div class="line"></div><div class="line">b.减少对DOM元素的查询和修改，查询时可将其赋值给局部变量。</div><div class="line"></div><div class="line">注：在IE中:hover会降低响应速度。</div></pre></td></tr></table></figure>
<h3 id="10、使用JSON格式来进行数据交换"><a href="#10、使用JSON格式来进行数据交换" class="headerlink" title="10、使用JSON格式来进行数据交换"></a>10、使用JSON格式来进行数据交换</h3><h4 id="基本原理：-2"><a href="#基本原理：-2" class="headerlink" title="基本原理："></a>基本原理：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">a.JSON是一种轻量级的数据交换格式，采用完全独立于语言的文本格式，是理想的数据交换格式。同时，JSON是 JavaScript原生格式，这意味着在 JavaScript 中处理 JSON数据不需要任何特殊的 API 或工具包。</div><div class="line"></div><div class="line">b.与XML序列化相比，JSON序列化后产生的数据一般要比XML序列化后数据体积小，所以在Facebook等知名网站中都采用了JSON作为数据交换方式。</div><div class="line"></div><div class="line">JS操作JSON：</div><div class="line"></div><div class="line">    在JSON中，有两种结构： 对象和数组。</div><div class="line"></div><div class="line">    一个对象以 “ &#123; ” 开始，“ &#125; ” 结束。每个“名称”后跟一个 “ : ” ；“名称/值 对”之间使用 “ , ”（逗号）分隔。 名称用引号括起来；值如果是字符串则必须用引号括起来，数值型则不需要。如：</div><div class="line">    var obj=&#123;<span class="string">"name"</span>:<span class="string">"darren"</span>,<span class="string">"age"</span>:24,<span class="string">"location"</span>:<span class="string">"beijing"</span>&#125;</div><div class="line"></div><div class="line">    数组是值（value）的有序集合。一个数组以 “ [ ” 开始， “ ] ” 结束。值之间使用 “ , ” （逗号）分隔。如：</div><div class="line">    var jsonlist=[&#123;<span class="string">"name"</span>:<span class="string">"darren"</span>,<span class="string">"age"</span>:24,<span class="string">"location"</span>:<span class="string">"beijing"</span>&#125;,&#123;<span class="string">"name"</span>:<span class="string">"weidong.nie"</span>,<span class="string">"age"</span>:24,<span class="string">"location"</span>:<span class="string">"hunan"</span>&#125;];</div><div class="line"></div><div class="line">    对这种数组和对象字面量的操作是非常方便且高效的。如果预先知道JSON结构的情况下，使用JSON进行数据传递简直是太美妙了，可以写出很实用美观可读性强的代码。如果你是纯粹的前台开发人员，一定会非常喜欢JSON。</div></pre></td></tr></table></figure>
<h3 id="11、高效使用HTML标签和CSS样式"><a href="#11、高效使用HTML标签和CSS样式" class="headerlink" title="11、高效使用HTML标签和CSS样式"></a>11、高效使用HTML标签和CSS样式</h3><h4 id="基本原理：-3"><a href="#基本原理：-3" class="headerlink" title="基本原理："></a>基本原理：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">a.HTML是一门用来描述网页的一种语言，它使用标记标签来描述网页，作为一名合格的前端开发，你有必要去知道其常用标签代表的含义(SEO)和属性(表现形式)。</div><div class="line"></div><div class="line">b.CSS指层叠样式表 (Cascading Style Sheets)，如果说把页面想象成一个人，HTML就是人的骨架，CSS就是人的衣装，一个人的品味从他的衣装就能一目了然。</div><div class="line"></div><div class="line">c.一名专业的前端开发也是一名优秀的重构，因为在页面中经常会有各种不合理的嵌套和重复定义的CSS样式，我不是要你重构页面，只是希望你在碰到这种情况的时候解决这些问题。如这样的</div><div class="line">    &lt;font size=<span class="string">"3"</span>&gt;HTML： 1 2 3 ... 4 5&lt;/font&gt;</div><div class="line">    复制代码</div><div class="line">    或者这样的CSS:</div><div class="line">    &lt;font size=<span class="string">"3"</span>&gt;body .box .border ul li p strong span&#123;color:<span class="comment">#000&#125;&lt;/font&gt;</span></div><div class="line">    复制代码</div><div class="line">    以上都是对HTML和CSS非常糟糕的使用方法。 </div><div class="line">    正确理解：</div><div class="line"></div><div class="line">    HTML是一门标记语言，使用合理的HTML标签前你必须了解其属性，比如Flow Elements，Metadata Elements ，Phrasing Elements。比较基础的就是得知道块级元素和内联元素、盒模型、SEO方面的知识。</div><div class="line"></div><div class="line">    CSS是用来渲染页面的，也是存在渲染效率的问题。CSS选择符是从右向左进行匹配的，这里对css选择符按照开销从小到大的顺序梳理一下：</div><div class="line"></div><div class="line">    ID选择符 <span class="comment">#box</span></div><div class="line"></div><div class="line">    类选择符 .box</div><div class="line"></div><div class="line">    标签 div</div><div class="line"></div><div class="line">    伪类和伪元素 a:hover</div><div class="line"></div><div class="line">    当页面被触发引起回流（reflow）的时候，低效的选择符依然会引发更高的开销，所以请避免低效。</div></pre></td></tr></table></figure>
<h3 id="12、精简CSS和JS文件"><a href="#12、精简CSS和JS文件" class="headerlink" title="12、精简CSS和JS文件"></a>12、精简CSS和JS文件</h3><h4 id="基本原理：-4"><a href="#基本原理：-4" class="headerlink" title="基本原理："></a>基本原理：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">a.有一条非常重要的准则一直没有提到，就是CSS和JavaScript的压缩，直接减少下载的文件体积。我个人经常使用的方式是使用 YUI Compressor，它的特点是：移除注释；移除额外的空格；细微优化；标识符替换。</div><div class="line"></div><div class="line">b.YUI Compressor是java程序，如果你对java很熟悉的话可快速的上手使用yuicompressor.jar；如果你对java很陌生也没关系，一样可以使用YUI Compressor，下面介绍其使用方式。 YUI Compressor的配置和使用：</div><div class="line">    先配置使用环境：</div><div class="line"></div><div class="line">    1.先确保电脑中是否安装了JDK</div><div class="line"></div><div class="line">    2.再配置必要的环境变量(细节不能三两句说清，所以不知道如何设置还是搜索吧)</div><div class="line"></div><div class="line">    3.在cmd界面，输入javac可测试是否安装成功</div><div class="line"></div><div class="line">    使用方法可从cmd到进入yuicompressor.jar所在磁盘，我以自己的yuicompressor-2.4.2.jar为例：</div><div class="line"></div><div class="line">    1.压缩JS</div><div class="line"></div><div class="line">    java -jar yuicompressor-2.4.2.jar api.js &gt; api.min.js</div><div class="line"></div><div class="line">    2.压缩CSS</div><div class="line"></div><div class="line">    java -jar yuicompressor-2.4.2.jar style.css &gt; style.min.css</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;WEB前端性能优化总结&quot;&gt;&lt;a href=&quot;#WEB前端性能优化总结&quot; class=&quot;headerlink&quot; title=&quot;WEB前端性能优化总结&quot;&gt;&lt;/a&gt;WEB前端性能优化总结&lt;/h1&gt;&lt;h3 id=&quot;1-减少http请求-合理设置HTTP缓存&quot;&gt;&lt;a href=&quot;#1-减少http请求-合理设置HTTP缓存&quot; class=&quot;headerlink&quot; title=&quot;1.减少http请求,合理设置HTTP缓存&quot;&gt;&lt;/a&gt;1.减少http请求,合理设置HTTP缓存&lt;/h3&gt;&lt;h4 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;a. http协议是无状态的应用层协议，意味着每次http请求都需要建立通信链路、进行数据传输，而在服务器端，每个http都需要启动独立的线程去处理。这些通信和服务的开销都很昂贵，减少http请求的数目可有效提高访问性能。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b. 减少http的主要手段是合并CSS、合并javascript、合并图片。将浏览器一次访问需要的javascript和CSS合并成一个文件，这样浏览器就只需要一次请求。图片也可以合并，多张图片合并成一张，如果每张图片都有不同的超链接，可通过CSS偏移响应鼠标点击操作，构造不同的URL。&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;c. 缓存的力量是强大的，恰当的缓存设置可以大大的减少 HTTP请求。假设某网站首页，当浏览器没有缓存的时候访问一共会发出 78个请求，共 600多 K数据，而当第二次访问即浏览器已缓存之后访问则仅有 10个请求，共 20多 K数据。 (这里需要说明的是，如果直接 F5刷新页面的话效果是不一样的，这种情况下请求数还是一样，不过被缓存资源的请求服务器是 304响应，只有 Header没有Body，可以节省带宽 )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;d. 怎样才算合理设置 ?原则很简单，能缓存越多越好，能缓存越久越好。例如，很少变化的图片资源可以直接通过 HTTP Header中的Expires设置一个很长的过期头 ;变化不频繁而又可能会变的资源可以使用 Last-Modifed来做请求验证。尽可能的让资源能够在缓存中待得更久。关于 HTTP缓存的具体设置和原理此处就不再详述了。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术积累" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="性能优化" scheme="http://yoursite.com/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>jquery.validate 插件的使用说明</title>
    <link href="http://yoursite.com/2016/09/09/validate/"/>
    <id>http://yoursite.com/2016/09/09/validate/</id>
    <published>2016-09-08T16:00:00.000Z</published>
    <updated>2017-08-21T12:13:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/DiegoLopesLima/validate" target="_blank" rel="external">https://github.com/DiegoLopesLima/validate</a></p>
<h1 id="使用语法"><a href="#使用语法" class="headerlink" title="使用语法"></a>使用语法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$( <span class="string">'#form'</span> ).validate();</div></pre></td></tr></table></figure>
<h1 id="可以使用自定义属性设置验证"><a href="#可以使用自定义属性设置验证" class="headerlink" title="可以使用自定义属性设置验证"></a>可以使用自定义属性设置验证</h1><p>data-conditional        Accepts one or more indexes separated by spaces<br>                        from the <code>conditional</code> object that should<br>                        contain a the boolean return function.<br>                        接收 一个或多个 由空格分隔的标记, 该标记定义在 <code>conditional</code><br>                        对象中. 每一个标记都应该是一个返回 boolean 值的函数.</p>
<a id="more"></a>
<p>data-ignore-case        Accepts a boolean value to specify if field is case-insensitive.<br>                        接收一个 boolean 值, 来指定是否忽略大小写. </p>
<p>data-mask               Accepts a mask to change the field value to the specified format.<br>                        The mask should use the character groups of the regular expression<br>                        passed to the <code>data-pattern</code> attribute.<br>                        接收掩码来设定字段中数据的格式. 掩码必须使用 <code>data-pattern</code> 属性设置<br>                        的正则表达式匹配组中的字符. 默认值为 ${ 0 }</p>
<p>data-pattern            Accepts a regular expression to test the field value.<br>                        接收一个正则表达式, 以测试字段的值.</p>
<p>data-prepare            Accepts a index from the <code>prepare</code> object that should contain a<br>                        function to receive the field value and returns a new value treated.<br>                        接收一个定义在 <code>prepare</code> 对象中的函数名. 该函数接收字段的数据,<br>                        并返回一个转换后的数据.</p>
<p>data-required           Accepts a boolean value to specify if field is required.<br>                        接收一个 boolean 值, 用于指定是否必须输入. 默认值为 false</p>
<p>data-trim               Accepts a boolean value. If true, removes the spaces from the<br>                        ends in the field value. (The field value is not changed)<br>                        接收一个 boolean 值. 如果为 true, 则移除字段结尾的空格( 字段的值不会改变 )<br>                        默认为 false</p>
<p>data-validate           You can use the <code>data-validate</code> to calling extensions.<br>                        可以使用 <code>data-validate</code> 来调用扩展.</p>
<h1 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h1><p>conditional             Accepts a object to store functions from validation.<br>                        设置为一个对象, 来存储验证函数.</p>
<p>filter                  Accepts a selector string or function to filter the validated fields.<br>                        设置为一个字符串或函数, 来筛选验证字段. 默认值为 *.</p>
<p>nameSpace               A namespace used in all delegates events.<br>                        命名空间用于所有的代理事件. 默认为 validate</p>
<p>onBlur                  Accepts a boolean value. If true, triggers the validation when blur the field.<br>                        接收一个 boolean 值. 如果为 true, 当字段失去焦点的时候触发验证. 默认为 false.</p>
<p>onChange                Accepts a boolean value. If true, triggers the validation when change the field value.<br>                        接收一个 boolean 值, 如果为真, 字段发生改变的时候触发验证. 默认为 false.</p>
<p>onKeyup                 Accepts a boolean value. If true, triggers the validation when press any key.<br>                        接收一个 boolean 值. 如果为 真. 在按下任意键的时候触发验证. 默认为 false.</p>
<p>onSubmit                Accepts a boolean value. If true, triggers the validation when submit the form.<br>                        接收一个 boolean 值. 如果为 真, 在提交表单的时候触发验证.   默认为 true.</p>
<p>prepare                 Accepts a object to store functions to prepare the field values.<br>                        接收一个对象, 来存储去预处理字段值的函数.</p>
<p>sendForm                Accepts a boolean value. If false, prevents submit the form (Useful to submit forms via AJAX).<br>                        接收一个 boolean 值. 如果为 false, 阻止表单提交行为( JAJX 提交数据的时候很有用 ). 默认为 true.</p>
<p>waiAria                 Accepts a boolean value. If false, disables WAI-ARIA.<br>                        接收一个 boolean 值. 如果为 false, 禁用 WAI-ARIA. 默认为 true.</p>
<h1 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h1><p>valid                   Accepts a function to be calling when form is valid. The context (<code>this</code>) is the current<br>                        verified form and the parameters are respectively <code>event</code> and <code>options</code>.<br>                        接收一个函数, 在表单数据有效的时候会被调用. 上下文( <code>this</code> )是当前被验证的表单对象. 同时参数是<br>                        各自的事件 与 选项.</p>
<p>invalid                 Accepts a function to be calling when form is invalid. The context (<code>this</code>) is the current<br>                        verified form and the parameters are respectively <code>event</code> and <code>options</code>.<br>                        接收一个函数, 在表单数据无效的时候会被调用. 上下文( <code>this</code> )是当前被验证的表单对象. 同时参数是<br>                        各自的事件 与 选项.</p>
<p>eachField               Accepts a function to be calling to each field. The context (<code>this</code>) is the current<br>                        verified field and the parameters are respectively <code>event</code>, <code>status</code> and <code>options</code>.<br>                        接收一个函数, 每一个字段都会调用该函数. 上下文( <code>this</code> )是当前被验证的表单对象. 同时参数是<br>                        各自的事件, 状态 与 选项.</p>
<p>eachInvalidField        Accepts a function to be calling when field is invalid. The context (<code>this</code>) is the current<br>                        verified field and the parameters are respectively <code>event</code>, <code>status</code> and <code>options</code>.<br>                        接收一个函数, 当字段验证失败的时候会调用该函数. 上下文( <code>this</code> )是当前被验证的表单对象. 同时参数是<br>                        各自的事件, 状态 与 选项.</p>
<p>eachValidField          Accepts a function to be calling when field is valid. The context (<code>this</code>) is the current<br>                        verified field and the parameters are respectively <code>event</code>, <code>status</code> and <code>options</code>.<br>                        接收一个函数, 当字段验证成功的时候会调用该函数. 上下文( <code>this</code> )是当前被验证的表单对象. 同时参数是<br>                        各自的事件, 状态 与 选项.</p>
<h1 id="移除验证"><a href="#移除验证" class="headerlink" title="移除验证"></a>移除验证</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="string">'#form'</span>).validateDestroy();</div></pre></td></tr></table></figure>
<h1 id="修改-validate-的默认值"><a href="#修改-validate-的默认值" class="headerlink" title="修改 validate 的默认值"></a>修改 validate 的默认值</h1><p>直接提供 validate 方法参数, 来修改默认的属性</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">jQuery.validate(&#123;</div><div class="line">  <span class="attr">sendForm</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">onKeyup</span>: <span class="literal">true</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="创建描述"><a href="#创建描述" class="headerlink" title="创建描述"></a>创建描述</h1><p>对验证不成功的字段, 可以提供错误描述信息. 操作步骤:</p>
<ul>
<li>提供需要呈现描述信息的容器标签. 例如 div 标签. 同时提供 id, 例如 ‘textId’</li>
<li>在需要验证的标签中使用 data-describedby 属性, 用于指向容器 id.</li>
<li>在验证标签中提供 data-description 属性, 并命名.</li>
<li>提供对象属性 description. 并提供该对象属性作为验证信息, 该属性名为 data-description 中描述的名字.</li>
<li>验证描述信息也为一个对象. 每一个验证条件都是一个对象属性. 用于描述验证失败时的提示文本.</li>
</ul>
<p>例如:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">data-describedby</span>=<span class="string">"messages"</span> <span class="attr">data-description</span>=<span class="string">"test"</span> /&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"messages"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'form'</span>).validate(&#123;</div><div class="line">	<span class="attr">description</span> : &#123;</div><div class="line">		<span class="attr">test</span> : &#123;</div><div class="line">			<span class="attr">required</span> : <span class="string">'&lt;div class="error"&gt;Required&lt;/div&gt;'</span>,</div><div class="line">			<span class="attr">pattern</span> : <span class="string">'&lt;div class="error"&gt;Pattern&lt;/div&gt;'</span>,</div><div class="line">			<span class="attr">conditional</span> : <span class="string">'&lt;div class="error"&gt;Conditional&lt;/div&gt;'</span>,</div><div class="line">			<span class="attr">valid</span> : <span class="string">'&lt;div class="success"&gt;Valid&lt;/div&gt;'</span></div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="创建扩展"><a href="#创建扩展" class="headerlink" title="创建扩展"></a>创建扩展</h1><p>可以使用 validateExtend 方法来定义扩展, 该扩展名可以利用 data-validate 属性作用与标签中.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"age"</span> <span class="attr">data-validate</span>=<span class="string">"age"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">jQuery(<span class="string">'form'</span>).validate();</div><div class="line"></div><div class="line">jQuery.validateExtend(&#123;</div><div class="line">	<span class="attr">age</span> : &#123;</div><div class="line">		<span class="attr">required</span> : <span class="literal">true</span>,</div><div class="line">		<span class="attr">pattern</span> : <span class="regexp">/^[0-9]+$/</span>,</div><div class="line">		<span class="attr">conditional</span> : <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</div><div class="line"></div><div class="line">			<span class="keyword">return</span> <span class="built_in">Number</span>(value) &gt; <span class="number">17</span>;</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/DiegoLopesLima/validate&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/DiegoLopesLima/validate&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;使用语法&quot;&gt;&lt;a href=&quot;#使用语法&quot; class=&quot;headerlink&quot; title=&quot;使用语法&quot;&gt;&lt;/a&gt;使用语法&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$( &lt;span class=&quot;string&quot;&gt;&#39;#form&#39;&lt;/span&gt; ).validate();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;可以使用自定义属性设置验证&quot;&gt;&lt;a href=&quot;#可以使用自定义属性设置验证&quot; class=&quot;headerlink&quot; title=&quot;可以使用自定义属性设置验证&quot;&gt;&lt;/a&gt;可以使用自定义属性设置验证&lt;/h1&gt;&lt;p&gt;data-conditional        Accepts one or more indexes separated by spaces&lt;br&gt;                        from the &lt;code&gt;conditional&lt;/code&gt; object that should&lt;br&gt;                        contain a the boolean return function.&lt;br&gt;                        接收 一个或多个 由空格分隔的标记, 该标记定义在 &lt;code&gt;conditional&lt;/code&gt;&lt;br&gt;                        对象中. 每一个标记都应该是一个返回 boolean 值的函数.&lt;/p&gt;
    
    </summary>
    
      <category term="技术积累(转载总结)" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF-%E8%BD%AC%E8%BD%BD%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
      <category term="validate" scheme="http://yoursite.com/tags/validate/"/>
    
  </entry>
  
  <entry>
    <title>逗号运算符简单的理解和运用</title>
    <link href="http://yoursite.com/2016/08/30/%E9%80%97%E5%8F%B7%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2016/08/30/逗号运算符的运算/</id>
    <published>2016-08-29T16:00:00.000Z</published>
    <updated>2017-08-15T11:33:14.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>逗号运算符是指，多个表达式可以用逗号分开，其中用逗号分开的表达式的值分别结算，但整个表达式的值是最后一个表达式的值。</strong></p>
<h3 id="1-在函数当中的使用"><a href="#1-在函数当中的使用" class="headerlink" title="1.在函数当中的使用"></a>1.在函数当中的使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">15</span>,</div><div class="line">b = <span class="number">20</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CommaTest</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> b++ , <span class="number">10</span>, a++;</div><div class="line"> &#125;</div><div class="line"><span class="keyword">var</span> c = CommaTest();</div><div class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 返回15  </span></div><div class="line"><span class="comment">// 函数调用的时候，返回值以逗号运算符最后一位参数为基准，返回值。</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="2-for循环中逗号运算符"><a href="#2-for循环中逗号运算符" class="headerlink" title="2.for循环中逗号运算符"></a>2.for循环中逗号运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在for循环当中，其逗号运算符的计算，以最后一个传入的参数为准进行计算</span></div><div class="line"><span class="keyword">var</span> i, j = <span class="number">5</span>, k;</div><div class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ , j++) &#123;</div><div class="line">    k = i + j;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(k)  <span class="comment">// 返回23</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>, m = <span class="number">0</span>; i &lt; <span class="number">10</span>, j &lt; <span class="number">20</span>, m &lt; <span class="number">5</span>; i++ , j++ , m++) &#123;</div><div class="line">    <span class="keyword">var</span> k = i + j + m;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(k)  <span class="comment">// 返回12</span></div></pre></td></tr></table></figure>
<h3 id="3-逗号运算符与函数调用运算符的冲突"><a href="#3-逗号运算符与函数调用运算符的冲突" class="headerlink" title="3.逗号运算符与函数调用运算符的冲突"></a>3.逗号运算符与函数调用运算符的冲突</h3><pre><code> // 由于逗号运算符在JavaScript中的优先级是最低的，因此函数运算符将先于逗号运算符运行，上述代码中第一个alert函数弹出2。 解决方法如第二个alert函数所示，加上括号，保证逗号运算符先运行。
如:alert(2, 5);//2
如:alert((2, 5));//5
</code></pre><h3 id="4-逗号运算符和赋值运算符冲突"><a href="#4-逗号运算符和赋值运算符冲突" class="headerlink" title="4.逗号运算符和赋值运算符冲突"></a>4.逗号运算符和赋值运算符冲突</h3><pre><code>// 由于逗号运算符要求它的运算数为复杂表达式或简单 表达式（如变量或直接量），赋值运算符先于逗号运算符执行，使逗号运算符左边不是一个运算数或表达式，而是含有var关键字的语句，因此报错。解决方法：只需加上括号，即var b = (++a, 10)，保证逗号运算符先执行即可。
var a = 20;
var b = (++a, 10);
console.log(b);//21
</code></pre><p><strong>案例测试</strong><br>console.log((0, 9));  //9  (括号提升了逗号运算的等级，不加括号则输出的是0和9)<br> var a = ‘a’, b = ‘b’;<br> a = [b, b = a][0];  //  b   (前面的[]代表的一维数组，0代表的是索引，此处没有牵涉到逗号运算符)<br>a = [b][b = a, 0];  //  b   (前面[]代表的是一维数组，后面的[]根据加号运算符的原理，则指引为0)<br>[[1,2,3],[4,5,6]][1][1]  // 5  (前面的是二维数组，后面的是第一个[]代表数组中的第一个索引，后面的[]代表的是二维护数组中的第一个的索引)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;逗号运算符是指，多个表达式可以用逗号分开，其中用逗号分开的表达式的值分别结算，但整个表达式的值是最后一个表达式的值。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-在函数当中的使用&quot;&gt;&lt;a href=&quot;#1-在函数当中的使用&quot; class=&quot;headerlink&quot; title=&quot;1.在函数当中的使用&quot;&gt;&lt;/a&gt;1.在函数当中的使用&lt;/h3&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;b = &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CommaTest&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b++ , &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, a++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; c = CommaTest();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(c); &lt;span class=&quot;comment&quot;&gt;// 返回15  &lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 函数调用的时候，返回值以逗号运算符最后一位参数为基准，返回值。&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术积累" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>兼容性问题及解决方案</title>
    <link href="http://yoursite.com/2016/08/18/%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/08/18/兼容性问题/</id>
    <published>2016-08-17T16:00:00.000Z</published>
    <updated>2017-08-14T07:36:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工作中常见的兼容性问题及解决方式"><a href="#工作中常见的兼容性问题及解决方式" class="headerlink" title="工作中常见的兼容性问题及解决方式"></a>工作中常见的兼容性问题及解决方式</h3><ol>
<li><p>png24位的图片在IE6上出背景，解决方案是 <code>做成png8即可 。</code></p>
</li>
<li><p>不同的浏览器打开的时候，会有8px左右的误差，为统一规格，解决方式为 <code>{padding：0px; margin:0px}。</code></p>
</li>
<li><p>IE6的双边距BUG:块属性标签shenfloat后，又有横线的margin情况下，在IE6显示margin比设置的大。浮动IE产生的双倍距离里#itcast{float:left;width:10px;margin:0 0  0  100px;}这种情况下，IE会产生20px的距离，解决方案是 <code>float的标签样式控制中加入_display：inline;将其转化为行内属性。（&quot;_&quot;这个符号只有IE6会识别）。</code></p>
<a id="more"></a></li>
<li><p>IE下，可以使用获取常规属性的方法来获取自定义属性，也可以使用getAtttibute()获取自定义属性;但在Firefox下,只能使用getAtttibute()来获取自定义的属性。解决方式： <code>统一使用getAtttibute()来获取自定义的属性。</code></p>
</li>
<li><p>IE下，even对象有x，y属性，但没有pageX和pageY属性，Firefox下，event对象有pageX和pageY属性，但没有x和y属性。解决方式： <code>（条件注释）缺点是IE浏览器可能会增加额外的HTTP请求数。</code></p>
</li>
<li><p>Chrome中文界面下默认会将小于12px的文本强制按照12px来显示，解决方式： <code>可通过加入css属性：-webkit-text-size-adjust：none;解决。</code></p>
</li>
<li><p>超链接访问过后的样式hover样式就不出现了，被点击访问过的超链接样式不在具有hover和active了。解决方式： <code>改变css属性的排列顺序：L-V-H-A(a:link{} a:visited{} a:hover{} a:active{})。</code></p>
</li>
<li><p>背景透明:opacity在IE下无效。解决方式: <code>非IE:opacity=.1;IE:filter: alpha(opacity=10)。</code></p>
</li>
<li><p>子元素会继承透明属性:父元素设置了透明度，则子元素也会透明。解决办法：<code>非IE:background:rgba(0,0,0,0.6);IE:filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=#99000000,endColorstr=#99000000)。</code><br><img src="https://ss0.bdstatic.com/94oJfD_bAAcT8t7mm9GUKT-xh_/timg?image&amp;quality=100&amp;size=b4000_4000&amp;sec=1501379319&amp;di=743f3211cd0ede77c41c5a0db7a9d019&amp;src=http://images2015.cnblogs.com/blog/593188/201512/593188-20151204102045549-1154843748.png" alt="插入圖片"></p>
</li>
<li><p>宽度解析不同:在Ie6中width（宽度）包括padding，在其他浏览器中width不包括padding。解決方法：<code>使用过滤器。</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">a.下划线属性过滤器</div><div class="line">当在一个属性前面增加了一个下划线后，由于符合标准的浏览器不能识别带有下线的属性而忽略了这个声明，但是在IE6及更低版本浏览器中会继续解析这个规则。</div><div class="line">语法：选择符&#123;_属性：属性值;&#125;</div><div class="line"></div><div class="line">b. !important关键字过滤器</div><div class="line">它表示所附加的声明具有最高优先级的意思。但由于IE6及更低版本不能识别它,我们可以利用IE6的这个Bug作为过滤器来兼容IE6和其它标准浏览器。</div><div class="line">语法：选择符&#123;属性：属性值!important;&#125;</div><div class="line"></div><div class="line">c. *属性过滤器</div><div class="line">当在一个属性前面增加了*后，该属性只能被IE7浏览器识别，其它浏览器混略该属性的作用。</div><div class="line">语法：选择符&#123;*属性：属性值;&#125;</div><div class="line"></div><div class="line">d. \9:IE版本识别；其它浏览器都不识别</div><div class="line">语法：选择符&#123;属性：属性值\9;&#125;</div><div class="line"></div><div class="line">e.  \0:IE8 及以上版本识别；其它浏览器都不识别</div><div class="line">语法：选择符&#123;属性：属性值\0;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>最大、最小宽、高问题:IE不识别min-width、min-heigh、max-width、max-heigh。解决办法：<code>div{width: auto;height: auto;min-width: 200px;min-height: 200px;}  
http://www.divcss5.com/wenji/w194.shtml 只有ie6不支持 ie7都支持。</code></p>
</li>
<li><p>IE6下默认行高：IE6下无法设置低于14px高，原因是由其默认行高引起的。解決办法：<code>声明：overflow:hidden;或者line-height:1px。</code></p>
</li>
<li><p>居中问题:IE6下在使用margin:0 auto;无法使其居中。解決办法：<code>为其父容器设置text-align:center。</code></p>
</li>
<li><p>baseline：各种元素的baseline不同，导致同样高度的行内元素无法垂直对齐。解決方法：<code>vertical-align:middle。</code></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;工作中常见的兼容性问题及解决方式&quot;&gt;&lt;a href=&quot;#工作中常见的兼容性问题及解决方式&quot; class=&quot;headerlink&quot; title=&quot;工作中常见的兼容性问题及解决方式&quot;&gt;&lt;/a&gt;工作中常见的兼容性问题及解决方式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;png24位的图片在IE6上出背景，解决方案是 &lt;code&gt;做成png8即可 。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不同的浏览器打开的时候，会有8px左右的误差，为统一规格，解决方式为 &lt;code&gt;{padding：0px; margin:0px}。&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;IE6的双边距BUG:块属性标签shenfloat后，又有横线的margin情况下，在IE6显示margin比设置的大。浮动IE产生的双倍距离里#itcast{float:left;width:10px;margin:0 0  0  100px;}这种情况下，IE会产生20px的距离，解决方案是 &lt;code&gt;float的标签样式控制中加入_display：inline;将其转化为行内属性。（&amp;quot;_&amp;quot;这个符号只有IE6会识别）。&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Rendering Engine" scheme="http://yoursite.com/categories/Rendering-Engine/"/>
    
    
      <category term="浏览器的兼容性" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>数组操作常用的方法</title>
    <link href="http://yoursite.com/2016/07/30/%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%E5%B8%B8%E7%94%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/07/30/数组操作常用的方法/</id>
    <published>2016-07-29T16:00:00.000Z</published>
    <updated>2017-08-14T07:35:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>在javascript当中，主要操作的对象可以简单的理解为是字符串，数组和键值对，因此数组常用的操作方法和属性需熟悉掌握。<br><strong>length</strong> <code>属性动态获取数组长度。//任何数组都有此属性，当数组为空的时候，其length的值为0。</code><br><strong>join()</strong> <code>将一个数组转成字符串。返回一个字符串。经常和split配合使用，用于数组和字符串之间的转化。</code><br><strong>reverse()</strong> <code>将数组中各元素颠倒顺序。通过此方法也可以实现数组中元素的倒序。</code><br><strong>shift()</strong> <code>从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。</code><br><a id="more"></a><br><strong>pop()</strong> <code>从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。</code><br><strong>unshift()</strong> <code>将一个或多个元素添加到数组的开头，并返回新数组的长度。</code><br><strong>push()</strong> <code>往数组结尾添加一个或多个数组元素，长度要改变。</code><br><strong>concat( )</strong> <code>连接数组，返回的是一个新数组。它连接的如果是数组的话，只能是平铺数组，如果是二维的数组，不能展开添加，如需展开，必须结合apply使用。</code><br><strong>slice( )</strong> <code>返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。原始数组不会被修改。</code><br><strong>sort( )</strong> <code>对数组元素进行排序，默认排序顺序是根据字符串Unicode码点。</code><br><strong>splice( )</strong> <code>插入、删除或替换数组的元素,由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</code><br><strong>toLocaleString( )</strong> <code>把数组转换成局部字符串。</code><br><strong>toString( )</strong> <code>将数组转换成一个字符串。</code><br><strong>forEach()</strong> <code>将数组转换成一个字符串。</code><br><strong>every()</strong>  <code>测试数组的所有元素是否都通过了指定函数的测试。</code><br><strong>some()</strong> <code>方法测试数组中的某些元素是否通过由提供的函数实现的测试。</code><br><strong>map()</strong>  <code>创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。</code><br><strong>filter()</strong>  <code>创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。</code><br><!--more--></p>
<h3 id="通过简单的demo来验证或者取代以上的方法。"><a href="#通过简单的demo来验证或者取代以上的方法。" class="headerlink" title="通过简单的demo来验证或者取代以上的方法。"></a>通过简单的demo来验证或者取代以上的方法。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">join() </div><div class="line">语法: <span class="number">1.</span> str = arr.join() <span class="comment">// 默认是",";</span></div><div class="line">      <span class="number">2.</span> str = arr.join(<span class="string">""</span>) <span class="comment">// 空格符===空字符串""; </span></div><div class="line">      <span class="number">3.</span> str = arr.join(separate) <span class="comment">// 分隔符</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'I'</span>, <span class="string">'love'</span>, <span class="string">'China'</span>] ;</div><div class="line">arr.join() <span class="comment">//return I,love,China</span></div><div class="line">arr.join(<span class="string">","</span>) <span class="comment">//return I,love,China</span></div><div class="line">arr.join(<span class="string">""</span>) <span class="comment">//return IloveChina</span></div><div class="line">arr.join(<span class="string">"-"</span>)<span class="comment">//return I-love-China</span></div><div class="line"></div><div class="line">join()和split()结合使用的demo</div><div class="line"><span class="keyword">var</span> str = <span class="string">'getElementById'</span>;<span class="comment">//转化为get-element-by-id</span></div><div class="line">    str = str.split(<span class="string">''</span>);<span class="comment">//使用split方法来切割字符串，并转化为数组，</span></div><div class="line">    <span class="keyword">var</span> newstr = str.map(<span class="function"><span class="keyword">function</span> (<span class="params">v</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (v.toUpperCase() == v) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"-"</span> + v.toLowerCase();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> v;</div><div class="line">        &#125;</div><div class="line">    &#125;).join(<span class="string">''</span>)<span class="comment">//转化为需求了</span></div><div class="line">注意：如果数组为空，通过join()分割后，均返回为一个空字符串；关于字符串之间的转换，经常和split()方法结合使用。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">reverse() </div><div class="line">语法:  arr.reverse() <span class="comment">//无需传参</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</div><div class="line">arr.reverse()  <span class="comment">//return [7, 6, 5, 4, 3, 2, 1]</span></div><div class="line"><span class="keyword">var</span> array = [];</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">    array[array.length] = arr[i];</div><div class="line">&#125;   <span class="comment">//此方法获得的结果和reverse()方法相同。</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">shift() </div><div class="line">语法: <span class="number">1.</span> arr.shift() </div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] ;</div><div class="line">arr.shift()  <span class="comment">//return 1;同时arr输出为[2, 3]</span></div><div class="line">[].shift()  <span class="comment">// return undefinded</span></div><div class="line">注意：<span class="number">1.</span> shift 方法并不局限于数组：该方法亦可通过 call 或 apply 作用于对象上。对于不包含 length 属性的对象，将添加一个值为 <span class="number">0</span> 的 length 属性。</div><div class="line">     <span class="number">2.</span> shift 方法移除索引为 <span class="number">0</span> 的元素(即第一个元素)，并返回被移除的元素，其他元素的索引值随之减 <span class="number">1</span>。如果length值 (长度为 <span class="number">0</span>，则返回 <span class="literal">undefined</span>。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pop() </div><div class="line">语法:  arr.pop() <span class="comment">//无需传参</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</div><div class="line">arr.pop() <span class="comment">//return 7; 同时arr变成为[1, 2, 3, 4, 5, 6];</span></div><div class="line">[].pop() <span class="comment">//return undefinded;</span></div><div class="line">注意：空数组上调用 pop()，它返回  <span class="literal">undefined</span>。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">unshift() </div><div class="line">语法:  arr.unshift(element1, ..., elementN)</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</div><div class="line">arr.unshift(<span class="number">0</span>) <span class="comment">//return 8; 同时arr变成为[0, 1, 2, 3, 4, 5, 6, 7];</span></div><div class="line">注意: <span class="number">1.</span> 当一个对象调用该方法时，返回其 length 属性值。</div><div class="line">      <span class="number">2.</span> unshift 方法会在调用它的类数组（array-like）对象的开始位置插入给定的参数。</div><div class="line">      <span class="number">3.</span> unshift 特意被设计成具有通用性；这个方法能够通过 call 或 apply 方法作用于类似数组的对象上。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">push()</div><div class="line">语法:  arr.push(element1, ..., elementN)</div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line">arr.push(<span class="number">4</span>, <span class="number">5</span>) <span class="comment">//return 5; 同时arr变成为[ 1, 2, 3, 4, 5];</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; </div><div class="line"><span class="keyword">var</span> array = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line">arr.push.apply(arr,array)  <span class="comment">//return 6;同时arr的为[1, 3, 5, 2, 4, 6];</span></div><div class="line">注意: <span class="number">1.</span> 当一个对象调用该方法时，返回其 length 属性值。</div><div class="line">      <span class="number">2.</span> push 方法有意具有通用性。合并数组的时候，该方法和 call() 或 apply()上下文一起使用时，可进行逐一的添加。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">concat()</div><div class="line">语法:  <span class="keyword">var</span> new_array = old_array.concat(value1[, value2[, ...[, valueN]]])</div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>];</div><div class="line"><span class="keyword">var</span> array = [<span class="string">'d'</span>,<span class="string">'e'</span>,<span class="string">'f'</span>];</div><div class="line">arr.concat(array) <span class="comment">//return ["a", "b", "c", "d", "e", "f"]; 同时arr不变为['a','b','c'];</span></div><div class="line">注意: 连接一个或多个数组（值）将不会改变原本的数组/值。进一步说，任何对新数组的操作都不会对原有的数组造成影响（仅当该元素不是对象的引用时），反之亦然。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">slice()</div><div class="line">语法: <span class="number">1.</span> arr.slice()</div><div class="line">      <span class="number">2.</span> arr.slice(begin)</div><div class="line">      <span class="number">3.</span> arr.slice(begin,end)</div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>, <span class="string">'five'</span>, <span class="string">'six'</span>];</div><div class="line">arr.slice(<span class="number">1</span>, <span class="number">3</span>) <span class="comment">//return ["two", "three"];同时原arr数组不变["one", "two", "three", "four", "five", "six"];</span></div><div class="line">注意: 获取的元素不包括end。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sort()</div><div class="line">语法: <span class="number">1.</span> arr.sort() </div><div class="line">      <span class="number">2.</span> arr.sort(compareFunction)</div><div class="line"><span class="keyword">var</span> arr = [<span class="string">'parent'</span>, <span class="string">'father'</span>, <span class="string">'mother'</span>, <span class="string">'aunt'</span>];</div><div class="line">arr.sort() <span class="comment">//return ["aunt", "father", "mother", "parent"];</span></div><div class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">23</span>, <span class="number">4</span>, <span class="number">85</span>, <span class="number">9</span>]</div><div class="line">array.sort() <span class="comment">//[1, 23, 4, 85, 9]</span></div><div class="line">array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;<span class="keyword">return</span> a-b&#125;) <span class="comment">//[1, 4, 9, 23, 85]</span></div><div class="line">注意: 当不传参数时，会按照默认排序顺序是根据字符串Unicode码点，如果数字进行排序的时候，必须传入参数，才能按照数字的大小进行排序。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">splice()</div><div class="line">语法: <span class="number">1.</span> array.splice(start) </div><div class="line">      <span class="number">2.</span> array.splice(start, deleteCount)</div><div class="line">      <span class="number">3.</span> array.splice(start, deleteCount, item1, item2, ...)</div><div class="line"><span class="keyword">var</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'mandarin'</span>, <span class="string">'sturgeon'</span>];</div><div class="line">myFish.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'drum'</span>); <span class="comment">// 在索引为2的位置插入'drum';myFish 变为 ["angel", "clown", "drum", "mandarin", "sturgeon"]</span></div><div class="line">myFish.splice(<span class="number">2</span>, <span class="number">1</span>); <span class="comment">// 从索引为2的位置删除一项（也就是'drum'这一项）;myFish 变为 ["angel", "clown", "mandarin", "sturgeon"]</span></div><div class="line">注意: splice() 方法与 slice() 方法的作用是不同的，splice() 方法会直接对数组进行修改。由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">toLocaleString( )</div><div class="line">语法: <span class="number">1.</span> arr.toLocaleString();</div><div class="line"><span class="keyword">var</span> number = <span class="number">1337</span>;</div><div class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</div><div class="line"><span class="keyword">var</span> myArr = [number, date, <span class="string">"foo"</span>];</div><div class="line"><span class="keyword">var</span> str = myArr.toLocaleString();   <span class="comment">//return "1,337,2016/8/8 下午9:58:12,foo"</span></div><div class="line">注意: toLocaleString() 返回一个字符串表示数组中的元素。数组中的元素将使用各自的 toLocaleString 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 <span class="string">","</span>）隔开。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">toString( )</div><div class="line">语法: <span class="number">1.</span> arr.toString()</div><div class="line"><span class="keyword">var</span> myArr = [<span class="string">'I'</span>, <span class="string">'Love'</span>, <span class="string">'China'</span>];</div><div class="line">myArr.toString() <span class="comment">//return "I,Love,China"</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">forEach( )</div><div class="line">语法: array.forEach(callback(currentValue, index, array)&#123;</div><div class="line">         <span class="comment">//do something</span></div><div class="line">      &#125;, <span class="keyword">this</span>)</div><div class="line"><span class="keyword">var</span> a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line">a.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(element); <span class="comment">//return a   b   c</span></div><div class="line">&#125;);</div><div class="line">注意：没有办法中止或者跳出 forEach 循环，除了抛出一个异常。如果可用，新方法 find() 或者findIndex() 也可被用于真值测试的提早终止。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">every()</div><div class="line">语法: arr.every(callback[, thisArg])</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>&#123;</div><div class="line"><span class="keyword">return</span> (element &gt;= <span class="number">10</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> passed = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough);<span class="comment">// passed is false</span></div><div class="line"><span class="keyword">var</span> passed = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough);<span class="comment">// passed is true</span></div><div class="line">注意：every不会改变原数组。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">some()</div><div class="line">    语法: arr.some(callback[, thisArg])</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> (element &gt;= <span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> passed = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].some(isBigEnough);<span class="comment">// passed is true</span></div><div class="line">    passed = [<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].some(isBigEnough);<span class="comment">// passed is true</span></div><div class="line">    注意：some不会改变原数组。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">map()</div><div class="line">    语法: <span class="keyword">let</span> array = arr.map(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">currentValue, index, array</span>) </span>&#123; </div><div class="line">            <span class="comment">// Return element for new_array </span></div><div class="line">          &#125;[, thisArg])</div><div class="line">          <span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</div><div class="line">          <span class="keyword">var</span> doubles = numbers.map(<span class="function">(<span class="params">x</span>) =&gt;</span> &#123;</div><div class="line">              <span class="keyword">return</span> x * <span class="number">2</span>;</div><div class="line">           &#125;);</div><div class="line">           <span class="built_in">console</span>.log(doubles) <span class="comment">// return [2, 10, 20, 30]</span></div><div class="line"> 注意：不改变原数组，成为新的数组。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">   filter()</div><div class="line">   语法: <span class="keyword">var</span> new_array = arr.filter(callback[, thisArg])</div><div class="line">         <span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">           <span class="keyword">return</span> element &gt;= <span class="number">10</span>;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">var</span> filtered = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].filter(isBigEnough);</div><div class="line">           <span class="comment">// filtered is [12, 130, 44]</span></div><div class="line">         <span class="built_in">console</span>.log(doubles) <span class="comment">// return [2, 10, 20, 30]</span></div><div class="line">注意：filter不会改变原数组。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在javascript当中，主要操作的对象可以简单的理解为是字符串，数组和键值对，因此数组常用的操作方法和属性需熟悉掌握。&lt;br&gt;&lt;strong&gt;length&lt;/strong&gt; &lt;code&gt;属性动态获取数组长度。//任何数组都有此属性，当数组为空的时候，其length的值为0。&lt;/code&gt;&lt;br&gt;&lt;strong&gt;join()&lt;/strong&gt; &lt;code&gt;将一个数组转成字符串。返回一个字符串。经常和split配合使用，用于数组和字符串之间的转化。&lt;/code&gt;&lt;br&gt;&lt;strong&gt;reverse()&lt;/strong&gt; &lt;code&gt;将数组中各元素颠倒顺序。通过此方法也可以实现数组中元素的倒序。&lt;/code&gt;&lt;br&gt;&lt;strong&gt;shift()&lt;/strong&gt; &lt;code&gt;从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术积累" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="Number" scheme="http://yoursite.com/tags/Number/"/>
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>字符串操作常用的方法</title>
    <link href="http://yoursite.com/2016/07/28/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2016/07/28/字符串操作的方法/</id>
    <published>2016-07-27T16:00:00.000Z</published>
    <updated>2017-08-14T07:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>在javascript当中，主要操作的对象可以简单的理解为是字符串，数组和键值对，因此字符串常用的操作方法需熟悉掌握。<br><strong>charCodeAt</strong> <code>方法返回一个整数，代表指定位置字符的Unicode编码。Unicode 编码单元（code points）的范围从 0 到 1,114,111（0x10FFFF）。注意：charCodeAt 总是返回一个小于 65,536 的值。</code><br><strong>charAt</strong> <code>方法返回指定索引位置处的字符。如果超出有效范围的引值返回空字符串,如果没有提供参数，则默认的是0。</code><br><strong>slice</strong> <code>方法返回字符串的片段。slice() 提取的新字符串包括beginSlice但不包括 endSlice。</code><br><strong>substring</strong> <code>方法返回位于String 对象中指定位置的子字符串。</code><br><strong>substr</strong> <code>方法返回一个从指定位置开始的指定长度的子字符串。</code><br><a id="more"></a><br><strong>indexOf</strong> <code>方法返回String 对象内第一次出现子字符串位置。如果没有找到子字符串，则返回-1。</code><br><strong>lastIndexOf</strong> <code>方法返回String 对象中字符串最后出现的位置。如果没有匹配到子字符串，则返回-1。</code><br><strong>search</strong> <code>方法返回与正则表达式查找内容匹配的第一个字符串的位置。</code><br><strong>concat</strong> <code>concat() 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。</code><br><strong>split</strong> <code>将一个字符串分割为子字符串，然后将结果作为字符串数组返回。</code><br><strong>match(searchvalue||regexp)</strong> <code>方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。括号内的条件必须填写。</code><br><strong>replace(regexp，replacement)</strong> <code>方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</code><br><strong>toLowerCase()</strong> <code>方法用于把字符串转换为小写。一个新的字符串，在其中 stringObject 的所有大写字符全部被转换为了小写字符。</code><br><strong>toUpperCase()</strong> <code>方法用于把字符串转换为大写。一个新的字符串，在其中 stringObject 的所有小写字符全部被转换为了大写字符。</code><br><strong>trim()</strong> <code>方法会从一个字符串的两端删除空白字符。</code></p>
<h3 id="通过简单的demo来具体说明以上的方法的使用情况。"><a href="#通过简单的demo来具体说明以上的方法的使用情况。" class="headerlink" title="通过简单的demo来具体说明以上的方法的使用情况。"></a>通过简单的demo来具体说明以上的方法的使用情况。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">charCodeAt()  语法：str.charCodeAt(index)</div><div class="line"><span class="string">"ABC"</span>.charCodeAt(<span class="number">0</span>) <span class="comment">//return 65</span></div><div class="line">注意：如果指定的 index 小于 <span class="number">0</span> 或不小于字符串的长度，则 charCodeAt 返回 <span class="literal">NaN</span>。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">charAt()  语法：str.charAt(index)</div><div class="line"><span class="string">"hello a"</span>.charAt(<span class="number">0</span>) <span class="comment">//return h</span></div><div class="line"><span class="string">"hello a"</span>.charAt(<span class="number">5</span>) <span class="comment">//return ' ' ,空格也占位置。</span></div><div class="line"><span class="string">"hello a"</span>.charAt(<span class="number">8</span>) <span class="comment">//return ''，当索引值大于length-1后，将会返回空字符串。</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">slice()  语法：str.slice(beginSlice，endSlice)</div><div class="line"><span class="string">"hello my wold"</span>.slice(<span class="number">0</span>,<span class="number">11</span>) <span class="comment">//return hello my wo</span></div><div class="line"><span class="string">"hello my wold"</span>.slice(<span class="number">0</span>,<span class="number">-2</span>) <span class="comment">//return hello my wo,如果endSlice该参数为负数，则被看作是 sourceLength + endSlice</span></div><div class="line">注意：slice() 提取的新字符串包括beginSlice但不包括 endSlice。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">substring() 语法：str.substring(indexStart, indexEnd)</div><div class="line"><span class="string">"forever I will rember!"</span>.substring(<span class="number">0</span>,<span class="number">5</span>) <span class="comment">//return forev</span></div><div class="line"><span class="string">"forever I will rember!"</span>.substring(<span class="number">5</span>,<span class="number">1</span>) <span class="comment">//return orev</span></div><div class="line"><span class="string">"forever I will rember!"</span>.substring(<span class="number">-2</span>,<span class="number">5</span>) <span class="comment">//return forev</span></div><div class="line"><span class="string">"forever I will rember!"</span>.substring(<span class="literal">NaN</span>,<span class="number">5</span>) <span class="comment">//return forev</span></div><div class="line">注意： <span class="number">1.</span> substring 提取从 indexStart 到 indexEnd（不包括）之间的字符。</div><div class="line">       <span class="number">2.</span> 如果 indexStart 等于 indexEnd，substring 返回一个空字符串。</div><div class="line">       <span class="number">3.</span> 如果省略 indexEnd，substring 提取字符一直到字符串末尾。</div><div class="line">       <span class="number">4.</span> 如果任一参数小于 <span class="number">0</span> 或为 <span class="literal">NaN</span>，则被当作 <span class="number">0</span>。</div><div class="line">       <span class="number">5.</span> 如果任一参数大于 stringName.length，则被当作 stringName.length。</div><div class="line">       <span class="number">6.</span> 如果 indexStart 大于 indexEnd，则 substring 的执行效果就像两个参数调换了一样。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">substr() 语法：substr(start,length)</div><div class="line"><span class="string">"abcdefghi"</span>.substr(<span class="number">1</span>,<span class="number">5</span>) <span class="comment">//return bcdef</span></div><div class="line"><span class="string">"abcdefghi"</span>.substr(<span class="number">-20</span>,<span class="number">2</span>) <span class="comment">//return ab</span></div><div class="line"><span class="string">"abcdefghi"</span>.substr(<span class="number">0</span>) <span class="comment">//return abcdefghi</span></div><div class="line">注意：<span class="number">1.</span> 开始提取字符的位置。如果为负值，则被看作 strLength + start。</div><div class="line">     <span class="number">2.</span> 如果只传一个参数，则表示从开始的索引开始，一直到结束。</div><div class="line">     <span class="number">3.</span> 如果 start 为正值，且大于或等于字符串的长度，则 substr 返回一个空字符串。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">indexOf() 语法：indexOf(searchValue,fromIndex)</div><div class="line"><span class="string">"hello my friend"</span>.indexOf(<span class="string">"friend"</span>,<span class="number">3</span>) <span class="comment">//return 9</span></div><div class="line"><span class="string">"hello my friend"</span>.indexOf(<span class="string">"frient"</span>,<span class="number">3</span>) <span class="comment">//return -1</span></div><div class="line">注意：指定值的第一次出现的索引; 如果没有找到 <span class="number">-1</span>。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lastIndexOf() 语法：lastIndexOf(searchValue,fromIndex)</div><div class="line"><span class="string">"hello my friend"</span>.lastIndexOf(<span class="string">"friend"</span>) <span class="comment">//return 9</span></div><div class="line">注意：指定值的第一次出现的索引; 如果没有找到 <span class="number">-1</span>。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">search() 语法：str.search(regexp)  如果匹配成功，则 search() 返回正则表达式在字符串中首次匹配项的索引。否则，返回 <span class="number">-1</span>。</div><div class="line"><span class="string">"hello my friend"</span>.search(<span class="regexp">/\s/</span>) <span class="comment">//return 5</span></div><div class="line"><span class="string">"hello my friend"</span>.search(<span class="regexp">/\d/</span>) <span class="comment">//return -1</span></div><div class="line">注意：指定值的第一次出现的索引; 如果没有找到 <span class="number">-1</span>。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">concat() 语法：str.concat(other str) </div><div class="line"><span class="string">"hello my friend"</span>.concat(<span class="string">",forever friend"</span>) <span class="comment">//return hello my friend,forever friend</span></div><div class="line"><span class="string">"hello my friend"</span> + <span class="string">",forever friend"</span>  <span class="comment">//return hello my friend,forever friend </span></div><div class="line">注意：如果是字符串的拼接，直接用+号或者是+=号连接会更好。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">split() 语法：str.split([separator[, limit]])</div><div class="line"><span class="string">"hello my friend"</span>.split(<span class="string">" "</span>) <span class="comment">//return ["hello", "my", "friend"] </span></div><div class="line">注意：当字符串为空时，split 返回一个包含一个空字符串的数组，而不是一个空数组。它一般和数组的join()方法结合使用。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">match() 语法：str.match(regexp)</div><div class="line"><span class="string">"hello my friend"</span>.match(<span class="regexp">/my/</span>) <span class="comment">//return ["my", index: 6, input: "hello my friend"]</span></div><div class="line">注意：如果正则表达式包含 g 标志，则该方法返回一个 <span class="built_in">Array</span> ，它包含所有匹配的子字符串而不是匹配对象。捕获组不会被返回(即不返回index属性和input属性)。如果没有匹配到，则返回  <span class="literal">null</span> 。</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">toLowerCase() 语法：str.toLowerCase()</div><div class="line"><span class="string">"HELLO MY FRIEND"</span>.toLowerCase() <span class="comment">//return hello my friend</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">toLowerCase() 语法：str.toUpperCase()</div><div class="line"><span class="string">"hello my friend"</span>.toUpperCase() <span class="comment">//return HELLO MY FRIEND</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">trim() 语法：str.trim()</div><div class="line"><span class="string">"hello "</span>.toUpperCase() <span class="comment">//return hello</span></div><div class="line"><span class="keyword">if</span> (!<span class="built_in">String</span>.prototype.trim) &#123; <span class="comment">//兼容旧版本</span></div><div class="line">        <span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g</span>, <span class="string">''</span>);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">注意：trim() 方法并不影响原字符串本身，它返回的是一个新的字符串。</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在javascript当中，主要操作的对象可以简单的理解为是字符串，数组和键值对，因此字符串常用的操作方法需熟悉掌握。&lt;br&gt;&lt;strong&gt;charCodeAt&lt;/strong&gt; &lt;code&gt;方法返回一个整数，代表指定位置字符的Unicode编码。Unicode 编码单元（code points）的范围从 0 到 1,114,111（0x10FFFF）。注意：charCodeAt 总是返回一个小于 65,536 的值。&lt;/code&gt;&lt;br&gt;&lt;strong&gt;charAt&lt;/strong&gt; &lt;code&gt;方法返回指定索引位置处的字符。如果超出有效范围的引值返回空字符串,如果没有提供参数，则默认的是0。&lt;/code&gt;&lt;br&gt;&lt;strong&gt;slice&lt;/strong&gt; &lt;code&gt;方法返回字符串的片段。slice() 提取的新字符串包括beginSlice但不包括 endSlice。&lt;/code&gt;&lt;br&gt;&lt;strong&gt;substring&lt;/strong&gt; &lt;code&gt;方法返回位于String 对象中指定位置的子字符串。&lt;/code&gt;&lt;br&gt;&lt;strong&gt;substr&lt;/strong&gt; &lt;code&gt;方法返回一个从指定位置开始的指定长度的子字符串。&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术积累" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>随机生成不重复的0-9的整数-----案例</title>
    <link href="http://yoursite.com/2016/05/07/%E9%9A%8F%E6%9C%BA%E7%94%9F%E6%88%900-9%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>http://yoursite.com/2016/05/07/随机生成0-9不重复的数字/</id>
    <published>2016-05-06T16:00:00.000Z</published>
    <updated>2017-08-14T07:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str=<span class="string">"  "</span>; <span class="comment">//定义一个字符串，其给一个空的元素</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">    <span class="keyword">var</span> s=str.charAt(<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(str.length)));</div><div class="line">    str=str.replace(s,i+s); <span class="comment">//由于s是随机的，所以位置的放置也是随机的</span></div><div class="line">&#125;</div><div class="line">str=str.replace(<span class="string">" "</span>,<span class="string">""</span>);</div><div class="line"><span class="built_in">console</span>.log(str);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">var</span> chest = &#123;&#125;,arr = [],mun, count = <span class="number">10</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">    mun = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>);</div><div class="line">    <span class="keyword">if</span> (!chest[mun]) &#123; <span class="comment">//间接的使用in的方法，判断是否含有mun数字，从而启动去重的作用</span></div><div class="line">        chest[mun] = <span class="literal">true</span>;</div><div class="line">        arr.push(mun);</div><div class="line">        <span class="keyword">continue</span>;<span class="comment">//跳出本次循环，进入下次循环</span></div><div class="line">    &#125;</div><div class="line">    ++count;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h2>  <figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">var</span>  arr = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</div><div class="line"><span class="keyword">var</span> index,temp;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</div><div class="line">	index = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*<span class="number">10</span>);</div><div class="line">	<span class="keyword">if</span>(index != i) &#123;<span class="comment">//通过两两的位置交换来实现</span></div><div class="line">		temp = arr[i];</div><div class="line">		arr[i] = arr[index];</div><div class="line">		arr[index] = temp;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;方法一：&quot;&gt;&lt;a href=&quot;#方法一：&quot; class=&quot;headerlink&quot; title=&quot;方法一：&quot;&gt;&lt;/a&gt;方法一：&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; str=&lt;span class=&quot;string&quot;&gt;&quot;  &quot;&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//定义一个字符串，其给一个空的元素&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;i&amp;lt;&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;i++)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; s=str.charAt(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.floor(&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.random()*(str.length)));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    str=str.replace(s,i+s); &lt;span class=&quot;comment&quot;&gt;//由于s是随机的，所以位置的放置也是随机的&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;str=str.replace(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(str);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术积累" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>搭建服务器环境</title>
    <link href="http://yoursite.com/2016/04/09/%E6%90%AD%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83/"/>
    <id>http://yoursite.com/2016/04/09/搭建服务器环境/</id>
    <published>2016-04-08T16:00:00.000Z</published>
    <updated>2017-08-15T12:56:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了更好的实现数据在服务器上的存储，或者交换，需要安装和搭建一个服务器环境。</p>
<h4 id="在wamp的bin目录下-有apache文件夹-里面就是apache的软件；在apache目录下-有一个conf文件夹-所有的配置文件都在这里。首先找到-httpd-conf-文件。"><a href="#在wamp的bin目录下-有apache文件夹-里面就是apache的软件；在apache目录下-有一个conf文件夹-所有的配置文件都在这里。首先找到-httpd-conf-文件。" class="headerlink" title="在wamp的bin目录下, 有apache文件夹, 里面就是apache的软件；在apache目录下 有一个conf文件夹. 所有的配置文件都在这里。首先找到 httpd.conf 文件。"></a>在wamp的bin目录下, 有apache文件夹, 里面就是apache的软件；在apache目录下 有一个conf文件夹. 所有的配置文件都在这里。首先找到 httpd.conf 文件。</h4><ol>
<li>ServerRoot 配置你的 apache 这个软件所在的文件夹路径。</li>
<li>listen 类配置默认监听的端口。</li>
<li>DocumentRoot 来配置网站根目录。</li>
<li><directory "..."=""> 来配置网站的基本参数( 一般不配置, 一般采用默认 )。</directory></li>
<li>重启服务器以后, 就可以运行apache.检查网站是否可以访问.</li>
</ol>
<h4 id="搭建网站，配置本地的域名系统host文件。"><a href="#搭建网站，配置本地的域名系统host文件。" class="headerlink" title="搭建网站，配置本地的域名系统host文件。"></a>搭建网站，配置本地的域名系统host文件。</h4><ol>
<li>在c盘的windows文件夹下找到system32,在里面找到 drivers, 在里面的etc目录。</li>
<li>里面会有一个host文件. 有的同学计算机安全级别较高, 因此将该文件拖到桌面上再修改, 然后拖回去覆盖.( 注意: 备份 )</li>
<li>打开该文件, 在里面添加 “ip 空格 域名” 的键值对。(如果是苹果的同学在桌面上使用 cmd + shift + g 打开定位目录 输入 /private/etc 可以找到)。</li>
</ol>
<h4 id="配置虚拟主机"><a href="#配置虚拟主机" class="headerlink" title="配置虚拟主机"></a>配置虚拟主机</h4><ol>
<li>这个网站的根目录必须是原始总的这个网站根目录下的文件夹。</li>
<li>找到 httpd.conf 文件中的 vhost 的注释, 将 include vhost 的配置文件注释去掉# Virtual hosts(Include conf/extra/httpd-vhosts.conf的#)。</li>
<li>改配置文件就是用于配置虚拟主机的配置文件, 找到该配置文件# 这里是为了配置网站的虚拟主机, 其目的在于在一台计算机上使用多个网站<virtualhost *:80=""> # 这里是配置这个虚拟主机网站的<pre><code class="js">&lt;VirtualHost *:80&gt;
# 这里是配置这个虚拟主机网站的 根目录 
DocumentRoot "C:/PHP/httpd-2.4.23-x64-vc11-r3/Apache24/htdocs/study-proj"
# 这里是配置这个网站的域名
ServerName study.com
# 这里是配置网站的别名( 可选 )
ServerAlias www.study.com
&lt;/VirtualHost&gt;
</code></pre>
</virtualhost></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为了更好的实现数据在服务器上的存储，或者交换，需要安装和搭建一个服务器环境。&lt;/p&gt;
&lt;h4 id=&quot;在wamp的bin目录下-有apache文件夹-里面就是apache的软件；在apache目录下-有一个conf文件夹-所有的配置文件都在这里。首先找到-httpd-con
    
    </summary>
    
      <category term="技术积累" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="apache" scheme="http://yoursite.com/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>搭建服务器环境</title>
    <link href="http://yoursite.com/2016/04/09/seo/"/>
    <id>http://yoursite.com/2016/04/09/seo/</id>
    <published>2016-04-08T16:00:00.000Z</published>
    <updated>2017-08-21T12:08:52.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h3><ol>
<li>全称：Search Engine Optimization—搜索引擎优化</li>
<li>分类：<pre><code>+ 白帽SEO
+ 黑帽SEO
&lt;!---more---&gt;
</code></pre></li>
<li>前端工程师：扁平化结构<ul>
<li>控制首页链接数量：</li>
<li>扁平化的目录层次：3层就可以跳到任何页面，不要纵深型，</li>
<li>导航SEO优化： 面包屑导航：随时可以返回</li>
</ul>
<ul>
<li>很久很久以前，在大森林的边上住着一个贫穷的樵夫，他与妻子和两个孩子相依为命。他的儿子名叫汉赛尔，女儿名叫格莱特。后来樵夫的妻子去世了，他又给孩子们娶了一个后母。后母计划把两个孩子带到森林的深处，然后趁他们睡着的时候跑掉。汉赛尔无意中知道了后母的计划，于是偷偷地把一块面包藏在了口袋里。在去森林的路上，汉赛尔悄悄地捏碎了他的面包，并不时地停下脚步，把碎面包屑撒在路上。后母顺利地趁孩子们睡着的时候溜掉了，汉赛尔和格莱特醒来已是一片漆黑。汉赛尔安慰他的妹妹说：“等太阳一出来，我们就看得见我撒在地上的面包屑了，它一定会指给我们回家的路。”但是当太阳升起来时，他们在地上却怎么也找不到一点面包屑了，原来它们都被那些在树林里、田野上飞来飞去的鸟儿一点点地啄食了。<ul>
<li>分页：首页  多一个下拉框  ，可以随时抓取任意页  控制页面大小，一个页面不要超过100K，太大加载速度慢，小蜘蛛超时就走了</li>
</ul>
</li>
</ul>
<ul>
<li><title>标题</title></li>
<li><meta keyworks="">关键字:<meta name="Keywords" content="各种关键字"></li>
<li><meta description="">网页描述：网页语义化<ul>
<li><a>标签加title  rel=”nofollow”  爬到其他网页就回不来了</a></li>
<li><h1>标签   很重要</h1></li>
<li><br>  文本换行</li>
<li><img>  alt</li>
<li><strong><em>小蜘蛛觉得很重要，起到强调的作用，<b><i>只是表示加粗，斜体</i></b></em></strong></li>
<li>重要HTML代码放在最前面，利用CSS</li>
<li>重要内容不要用JS输出：小蜘蛛看不到JS</li>
<li>尽量少使用iframe框架：一般小蜘蛛不会看</li>
<li>谨慎使用display:none;—-会过滤掉</li>
<li>不断精简代码：能使用一个标签就用一个，言简意赅</li>
</ul>
</li>
</ul>
</li>
<li>SEM (Search Engine Marketing)—–搜索引擎营销</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;SEO&quot;&gt;&lt;a href=&quot;#SEO&quot; class=&quot;headerlink&quot; title=&quot;SEO&quot;&gt;&lt;/a&gt;SEO&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;全称：Search Engine Optimization—搜索引擎优化&lt;/li&gt;
&lt;li&gt;分类：&lt;pre&gt;&lt;code&gt;
    
    </summary>
    
      <category term="技术积累" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="apache" scheme="http://yoursite.com/tags/apache/"/>
    
  </entry>
  
  <entry>
    <title>常见的浏览器内核</title>
    <link href="http://yoursite.com/2016/04/05/%E5%B8%B8%E8%A7%81%E7%9A%84%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/"/>
    <id>http://yoursite.com/2016/04/05/常见的浏览器内核/</id>
    <published>2016-04-04T16:00:00.000Z</published>
    <updated>2017-08-14T07:34:28.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="nbsp-nbsp-nbsp-通常所属的浏览器内核（Rendering-Engine）就是浏览器的渲染引擎，浏览器的渲染引擎决定了浏览器如何显示网页的内容，以及页面的格式信息。"><a href="#nbsp-nbsp-nbsp-通常所属的浏览器内核（Rendering-Engine）就是浏览器的渲染引擎，浏览器的渲染引擎决定了浏览器如何显示网页的内容，以及页面的格式信息。" class="headerlink" title="&nbsp;  &nbsp;  &nbsp;  通常所属的浏览器内核（Rendering Engine）就是浏览器的渲染引擎，浏览器的渲染引擎决定了浏览器如何显示网页的内容，以及页面的格式信息。"></a>&nbsp;  &nbsp;  &nbsp;  通常所属的浏览器内核（Rendering Engine）就是浏览器的渲染引擎，浏览器的渲染引擎决定了浏览器如何显示网页的内容，以及页面的格式信息。</h4><ol>
<li><code>Trident内核（又称MSHTML）</code><ol>
<li>IE、MaxThon、360、搜狗浏览器、猎豹安全浏览器、百度浏览器。</li>
</ol>
</li>
<li><code>Gecko内核</code><ol>
<li>Firefox、火狐。</li>
</ol>
</li>
<li><code>Webkit内核</code><ol>
<li>Safari。<a id="more"></a></li>
</ol>
</li>
<li><code>Blink内核</code><ol>
<li>Chrome、Opera。</li>
</ol>
</li>
<li><code>Presto内核</code><ol>
<li>Opera7以上(Opera7原来为Presto，现为Blink) 。</li>
</ol>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;nbsp-nbsp-nbsp-通常所属的浏览器内核（Rendering-Engine）就是浏览器的渲染引擎，浏览器的渲染引擎决定了浏览器如何显示网页的内容，以及页面的格式信息。&quot;&gt;&lt;a href=&quot;#nbsp-nbsp-nbsp-通常所属的浏览器内核（Rendering-Engine）就是浏览器的渲染引擎，浏览器的渲染引擎决定了浏览器如何显示网页的内容，以及页面的格式信息。&quot; class=&quot;headerlink&quot; title=&quot;&amp;nbsp;  &amp;nbsp;  &amp;nbsp;  通常所属的浏览器内核（Rendering Engine）就是浏览器的渲染引擎，浏览器的渲染引擎决定了浏览器如何显示网页的内容，以及页面的格式信息。&quot;&gt;&lt;/a&gt;&amp;nbsp;  &amp;nbsp;  &amp;nbsp;  通常所属的浏览器内核（Rendering Engine）就是浏览器的渲染引擎，浏览器的渲染引擎决定了浏览器如何显示网页的内容，以及页面的格式信息。&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Trident内核（又称MSHTML）&lt;/code&gt;&lt;ol&gt;
&lt;li&gt;IE、MaxThon、360、搜狗浏览器、猎豹安全浏览器、百度浏览器。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Gecko内核&lt;/code&gt;&lt;ol&gt;
&lt;li&gt;Firefox、火狐。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Webkit内核&lt;/code&gt;&lt;ol&gt;
&lt;li&gt;Safari。
    
    </summary>
    
      <category term="Rendering Engine" scheme="http://yoursite.com/categories/Rendering-Engine/"/>
    
    
      <category term="浏览器内核" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/"/>
    
  </entry>
  
  <entry>
    <title>欢迎来踩***不忘初衷</title>
    <link href="http://yoursite.com/2016/03/20/first-fell/"/>
    <id>http://yoursite.com/2016/03/20/first-fell/</id>
    <published>2016-03-19T16:00:00.000Z</published>
    <updated>2017-08-14T07:33:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开篇感受"><a href="#开篇感受" class="headerlink" title="开篇感受"></a>开篇感受</h2><blockquote>
<p>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不知从何时开始，每每自己开始弄一个新的东西，都喜欢留点当时的感受，以便后续自己在回味时，无穷，记忆是无序的，感受是不曾停留的，为留住这一瞬间的感动，以文字作为凭证。<br>&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;搭建博客的初衷是记录自己学习前端的点滴，对于我个人而言，是把自己难以记住的知识点或者工作当中，跳进的坑洼，在此记录，便于后续自己再次查看，不在同一个坑里点进两次，同时也希望能给那些和我一样，遇到同样困境的，猿友们一点捷径，不往坑里跳，或许方法或者知识点不够完善，乃至偏离正轨，在此希望进来的各位大神们，指点，小女子不胜感激。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;开篇感受&quot;&gt;&lt;a href=&quot;#开篇感受&quot; class=&quot;headerlink&quot; title=&quot;开篇感受&quot;&gt;&lt;/a&gt;开篇感受&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;不知从何时
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>HEXO快速创建个人博客</title>
    <link href="http://yoursite.com/2016/03/12/hexo%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2016/03/12/hexo快速创建个人博客/</id>
    <published>2016-03-11T16:00:00.000Z</published>
    <updated>2017-08-14T07:33:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul>
<li><p>安装GIT</p>
<p>  下载 msysgit 并执行即可完成安装。</p>
</li>
<li><p>安装node.js</p>
<p>  在windows下安装node.js,下载并且安装文件即可，查看node.js版本，在cmd中输入<br>  <code>node -v</code> 用来查看版本</p>
</li>
<li><p>download <a href="https://github.com/hexojs/hexo" target="_blank" rel="external">hexo</a></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3></li>
</ul>
<ol>
<li>利用npm安装(cmd或者任意位置git bash)：<br> <code>npm install -g hexo</code><br> <em>npm ERR! registry error parsing json 错误</em><br> 可能需要设置npm代理,执行命令<br> <code>npm config set registry http://registry.cnpmjs.org</code> <a id="more"></a></li>
<li><p>创建hexo文件夹</p>
<p> 在任意一个文件夹下使用git bash，输入以下指令<br> <code>hexo init</code></p>
</li>
<li><p>安装依赖包</p>
<p> <code>npm install</code></p>
</li>
<li><p>在本地查看博客</p>
<p> 在文件夹下执行<br> <code>hexo generate</code>  //生成静态页面<br> <code>hexo server</code>   本地起动，在浏览器中输入<a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a></p>
</li>
<li><p>在github上建立一个仓库，对应的名字必须是以下格式<br> yourname.github.io</p>
<p> 在本地的文件夹中有一个_config.yml文件来建立关联：  </p>
<p> <code>#Hexo Configuration</code><br> <code>## Docs:http://hexo.io/docs/configuration.html</code><br> <code>## Source: https://github.com/hexojs/hexo/</code><br> <code># Site #站点信息</code><br> <code>title: #标题</code><br> <code>subtitle: #副标题</code><br> <code>description: #站点描述，给搜索引擎看的</code><br> <code>author: #作者</code><br> <code>email: #电子邮箱</code><br> <code>language: zh-CN #语言</code><br> <code># URL #链接格式</code><br> <code>url: #网址</code><br> <code>root: / #根目录</code><br> <code>permalink: :year/:month/:day/:title/ #文章的链接格式</code><br> <code>tag_dir: tags #标签目录</code><br> <code>archive_dir: archives #存档目录</code><br> <code>category_dir: categories #分类目录</code><br> <code>code_dir: downloads/code</code><br> <code>permalink_defaults: # Directory #目录</code><br> <code>source_dir: source #源文件目录</code><br> <code>public_dir: public #生成的网页文件目录</code><br> <code># Writing #写作</code><br> <code>new_post_name: :title.md #新文章标题</code><br> <code>default_layout: post #默认的模板，包括 post、page、photo、draft（文章、页面、照片、草稿)</code><br> <code>titlecase: false #标题转换成大写</code><br> <code>external_link: true #在新选项卡中打开连接</code><br> <code>filename_case: 0</code><br> <code>render_drafts: false</code><br> <code>post_asset_folder: false</code><br> <code>relative_link: false</code><br> <code>highlight: #语法高亮</code><br> <code>enable: true #是否启用</code><br> <code>line_number: true#显示行号</code><br> <code>tab_replace: # Category &amp; Tag #分类和标签</code><br> <code>default_category: uncategorized #默认分类</code><br> <code>category_map:</code><br> <code>tag_map:</code><br> <code># Archives</code><br> <code>2: 开启分页</code><br> <code>1: 禁用分页</code><br> <code>0: 全部禁用</code><br> <code>archive: 2</code><br> <code>category: 2</code><br> <code>tag: 2</code><br> <code># Server #本地服务器</code><br> <code>port: 4000 #端口号</code><br> <code>server_ip: localhost #IP 地址</code><br> <code>logger: false</code><br> <code>logger_format: dev</code><br> <code># Date / Time format #日期时间格式</code><br> <code>date_format: YYYY-MM-DD #参考http://momentjs.com/docs/#/displaying/format/</code><br> <code>time_format: H:mm:ss</code><br> <code># Pagination #分页</code><br> <code>per_page: 10 #每页文章数，设置成 0 禁用分页</code><br> <code>pagination_dir: page</code><br> <code># Disqus #Disqus评论，替换为多说</code><br> <code>disqus_shortname:</code><br> <code># Extensions #拓展插件</code><br> <code>theme: landscape-plus #主题</code><br> <code>exclude_generator:</code><br> <code>plugins: #插件，例如生成 RSS 和站点地图的</code><br> <code>- hexo-generator-feed</code><br> <code>- hexo-generator-sitemap</code><br> <code># Deployment #部署</code><br> <code>deploy:</code><br> <code>type: git</code><br> <code>repo: 刚刚github创库地址.git</code><br> <code>branch: master</code></p>
</li>
<li><p><code>npm install hexo-deployer-git --save</code>执行命令</p>
</li>
<li><p><code>hexo deploy</code></p>
</li>
</ol>
<ol>
<li><p>常用指令</p>
<p> <code>hexo help #查看帮助</code><br> <code>hexo init #初始化一个目录</code><br> <code>hexo new &quot;postName&quot; #新建文章</code><br> <code>hexo new page &quot;pageName&quot; #新建页面</code><br> <code>hexo generate #生成网页，可以在 public 目录查看整个网站的文件</code><br> <code>hexo server #本地预览，&#39;Ctrl+C&#39;关闭</code><br> <code>hexo deploy #部署.deploy目录</code><br> <code>hexo clean #清除缓存，**强烈建议每次执行命令前先清理缓存，每次部署前先删除 .deploy 文件夹**</code></p>
</li>
<li><p>每次修改文件后，直接输入<code>hexo g &amp; hexo d</code>即可更新</p>
</li>
</ol>
<!--more-->]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装GIT&lt;/p&gt;
&lt;p&gt;  下载 msysgit 并执行即可完成安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;安装node.js&lt;/p&gt;
&lt;p&gt;  在windows下安装node.js,下载并且安装文件即可，查看node.js版本，在cmd中输入&lt;br&gt;  &lt;code&gt;node -v&lt;/code&gt; 用来查看版本&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;download &lt;a href=&quot;https://github.com/hexojs/hexo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hexo&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;利用npm安装(cmd或者任意位置git bash)：&lt;br&gt; &lt;code&gt;npm install -g hexo&lt;/code&gt;&lt;br&gt; &lt;em&gt;npm ERR! registry error parsing json 错误&lt;/em&gt;&lt;br&gt; 可能需要设置npm代理,执行命令&lt;br&gt; &lt;code&gt;npm config set registry http://registry.cnpmjs.org&lt;/code&gt;
    
    </summary>
    
      <category term="安装文件方法" scheme="http://yoursite.com/categories/%E5%AE%89%E8%A3%85%E6%96%87%E4%BB%B6%E6%96%B9%E6%B3%95/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/03/02/hello-world/"/>
    <id>http://yoursite.com/2016/03/02/hello-world/</id>
    <published>2016-03-01T16:00:00.000Z</published>
    <updated>2017-08-14T07:32:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
